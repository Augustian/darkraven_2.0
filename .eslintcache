[{"D:\\LanguageProjects\\darkraven_2.0\\src\\index.js":"1","D:\\LanguageProjects\\darkraven_2.0\\src\\App.js":"2","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Posts.js":"3","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Films.js":"4","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Head.js":"5","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Left_Bar.js":"6","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\VideoPlayer.js":"7","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Top.js":"8","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\BD.js":"9","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Actors.js":"10","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Searth.js":"11","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Watched.js":"12","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Login.js":"13","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Profile.js":"14","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\EditPage.js":"15","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\EditActors.js":"16","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\ActorSearth.js":"17","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\Post.js":"18","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\Header.js":"19","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\HeaderMobile.js":"20","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\Film.js":"21","D:\\LanguageProjects\\darkraven_2.0\\src\\Router.js":"22","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\Loading.js":"23","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Favorites.js":"24","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\ActorSlot.js":"25"},{"size":1013,"mtime":1693751285196,"results":"26","hashOfConfig":"27"},{"size":568,"mtime":1694174832612,"results":"28","hashOfConfig":"27"},{"size":1579,"mtime":1694290062680,"results":"29","hashOfConfig":"27"},{"size":1348,"mtime":1694288566373,"results":"30","hashOfConfig":"27"},{"size":3679,"mtime":1694528584922,"results":"31","hashOfConfig":"27"},{"size":1013,"mtime":1694283405101,"results":"32","hashOfConfig":"27"},{"size":10290,"mtime":1694539440482,"results":"33","hashOfConfig":"27"},{"size":3892,"mtime":1693737468294,"results":"34","hashOfConfig":"27"},{"size":5237,"mtime":1693735816082,"results":"35","hashOfConfig":"27"},{"size":2151,"mtime":1694540347093,"results":"36","hashOfConfig":"27"},{"size":1707,"mtime":1694177965151,"results":"37","hashOfConfig":"27"},{"size":1790,"mtime":1694531117736,"results":"38","hashOfConfig":"27"},{"size":6082,"mtime":1693752989813,"results":"39","hashOfConfig":"27"},{"size":3753,"mtime":1694529220587,"results":"40","hashOfConfig":"27"},{"size":10704,"mtime":1693736644042,"results":"41","hashOfConfig":"27"},{"size":3592,"mtime":1694536180970,"results":"42","hashOfConfig":"27"},{"size":4522,"mtime":1693736616580,"results":"43","hashOfConfig":"27"},{"size":495,"mtime":1693730195996,"results":"44","hashOfConfig":"27"},{"size":4082,"mtime":1694528992340,"results":"45","hashOfConfig":"27"},{"size":5245,"mtime":1693737451181,"results":"46","hashOfConfig":"27"},{"size":3745,"mtime":1694531292075,"results":"47","hashOfConfig":"27"},{"size":7477,"mtime":1694539067068,"results":"48","hashOfConfig":"27"},{"size":352,"mtime":1694175235640,"results":"49","hashOfConfig":"27"},{"size":1848,"mtime":1694531497721,"results":"50","hashOfConfig":"27"},{"size":1003,"mtime":1694540326780,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"1gyxex",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"55"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"55"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"55"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"55"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"55"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"55"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"55"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"55"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"55"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"55"},"D:\\LanguageProjects\\darkraven_2.0\\src\\index.js",["127","128"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'swiper/swiper.scss';\r\nimport Cookies from 'js-cookie';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nexport function setCookie(cname, cvalue, exdays) {\r\n  var d = new Date();\r\n  d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\r\n  var expires = \"expires=\" + d.toUTCString();\r\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n}\r\n\r\nexport function getCookie(cname) {\r\n  var name = cname + \"=\";\r\n  var decodedCookie = decodeURIComponent(document.cookie);\r\n  var ca = decodedCookie.split(';');\r\n  for (var i = 0; i < ca.length; i++) {\r\n    var c = ca[i];\r\n    while (c.charAt(0) == ' ') {\r\n      c = c.substring(1);\r\n    }\r\n    if (c.indexOf(name) == 0) {\r\n      return c.substring(name.length, c.length);\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\nexport function logout() {\r\n  Cookies.remove(\"jwt\");\r\n}",["129","130"],"D:\\LanguageProjects\\darkraven_2.0\\src\\App.js",[],"D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Posts.js",["131"],"import React, { useEffect, useState } from 'react';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport Post from './Template/Post';\r\n\r\nconst Posts = (props) => {\r\n\r\n    const [pageSize, setPageSize] = useState(5);\r\n    const [page, setPage] = useState(1);\r\n    const [posts, setPosts] = useState(null);\r\n\r\n    const GetData = (page) => {\r\n        var form = new FormData();\r\n        form.append('page', page);\r\n        form.append('pageSize', 10);\r\n        form.append('type', 3);\r\n        fetch('http://site.alwaysdata.net/api/get_content.php', {\r\n            method: 'POST',\r\n            body: form,\r\n        }).then(res => res.json())\r\n            .then(respons => {\r\n                console.log(respons);\r\n                setPosts(respons);\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetData(0);\r\n    }, [])\r\n\r\n    const data = posts;\r\n    if (!data) { return <div>Загрузка данных....</div> }\r\n\r\n    return (\r\n        <div className=\"central\">\r\n            {data.posts.map((post, key) =>\r\n                <Post key={key} data={post} />\r\n            )}\r\n            <Pagination\r\n                className=\"pagination\"\r\n                count={Math.ceil(data.count / pageSize)}\r\n                page={page}\r\n                siblingCount={3}\r\n                boundaryCount={2}\r\n                onChange={(event, page) => {\r\n                    props.Func(props.type, page - 1, pageSize);\r\n                    window.scrollTo(0, 0);\r\n                    setPage(page);\r\n                }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Posts;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Films.js",["132","133","134"],"import React from 'react';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport Film from './Template/Film';\r\n\r\nconst Films = (props) => {\r\n    const [page, setPage] = useState(1);\r\n    const [pageSize, setPageSize] = useState(15);\r\n\r\n    const onShowSizeChange = (current, size) => {\r\n        setPageSize(size);\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.RenP(props.type, 0, props.pageSize)\r\n    }, [props.type])\r\n\r\n    useEffect(() => {\r\n        setPageSize(props.pageSize);\r\n    }, [pageSize])\r\n\r\n    const data = props.ContentVideo;\r\n    if (!data) { return <div>Загрузка данных....</div> }\r\n\r\n    return (\r\n        <div className=\"central\">\r\n            {data.posts.map((post, key) =>\r\n                <Film key={key} data={post} {...props}/>\r\n            )}\r\n\r\n            <Pagination\r\n                className=\"pagination\"\r\n                count={Math.ceil(data.count / pageSize)}\r\n                page={page}\r\n                siblingCount={3}\r\n                boundaryCount={2}\r\n                onChange={(event, page) => {\r\n                    props.Func(props.type, page - 1, pageSize);\r\n                    window.scrollTo(0, 0);\r\n                    setPage(page);\r\n                }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Films;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Head.js",["135","136","137","138","139","140"],"import React, { useEffect, useState } from 'react';\r\nimport Header from './Template/Header';\r\nimport HeaderMobile from './Template/HeaderMobile';\r\nimport Login from './Login';\r\nimport Profile from './Profile';\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { getCookie } from \"../index\";\r\nimport { Fade, Slide, useScrollTrigger } from '@mui/material';\r\n\r\nconst Head = (props) => {\r\n\r\n    const [bookMarks, setBookMarks] = useState([]);\r\n    const [sliderPost, setSliderPost] = useState([]);\r\n\r\n    const GetSave = () => {\r\n        var form = new FormData();\r\n        form.append('table', localStorage.getItem(\"token\"));\r\n        fetch('http://site.alwaysdata.net/write.php', {\r\n            method: 'POST',\r\n            body: form,\r\n        }).then(res => res.json())\r\n            .then(respons => {\r\n                this.setState({ BookMarks: respons.marks });\r\n            })\r\n    }\r\n\r\n    const RemoveSaveBookMark = (id) => {\r\n        var form = new FormData();\r\n        form.append('id', id);\r\n        form.append('table', localStorage.getItem(\"token\"));\r\n        fetch('http://site.alwaysdata.net/remove.php', {\r\n            method: 'POST',\r\n            body: form,\r\n        })\r\n    }\r\n\r\n    const GetSliderData = () => {\r\n        fetch('http://site.alwaysdata.net/api/slider.php', {\r\n            method: 'POST',\r\n        }).then(res => res.json())\r\n            .then(respons => {\r\n                setSliderPost(respons);\r\n            })\r\n    }\r\n\r\n    const trigger = useScrollTrigger({\r\n        target: undefined,\r\n        disableHysteresis: true,\r\n        threshold: 40,\r\n      });\r\n\r\n    useEffect(() => {\r\n        GetSliderData();\r\n    }, [])\r\n    return (\r\n        <>\r\n            <div className=\"header\">\r\n                <h3>Kino <span style={{ backgroundColor: \"#ffd700\", color: \"#262a2d\", padding: \"0 5px 3px 5px\", borderRadius: \"5px\" }}>Wold</span></h3>\r\n                {getCookie('jwt') == \"\" && <Login message={props.onMessage} />}\r\n            </div>\r\n\r\n            <Header profileShow={trigger} searth={props.Search} type={props.Type} pageSize={props.pageSize} BookMarks={bookMarks} RemoveSaveBookMark={RemoveSaveBookMark} message={props.onMessage} getsave={GetSave} />\r\n            <HeaderMobile searth={props.Search} type={props.Type} pageSize={props.pageSize} BookMarks={bookMarks} RemoveSaveBookMark={RemoveSaveBookMark} message={props.onMessage} getsave={GetSave} />\r\n\r\n            <div>\r\n                <Swiper style={{ height: \"400px\" }} >\r\n                    {sliderPost.map((items, key) =>\r\n                        <SwiperSlide key={key}>\r\n                            <div className=\"item\">\r\n                                <a href={\"/video_player/\" + items.id_video}>\r\n                                    <div className=\"carusel_item\">\r\n                                        <div className=\"carusel_background\" style={{ backgroundImage: \"url(\" + items.poster_url + \")\" }}></div>\r\n                                        <div className={\"carusel_info\"}>\r\n                                            <div>\r\n                                                <h2>{items.title}</h2>\r\n                                                <p>{items.description}</p>\r\n                                            </div>\r\n                                            <img src={items.poster_url} style={{ width: \"170px\" }} />\r\n                                        </div>\r\n                                    </div>\r\n                                </a>\r\n                            </div>\r\n                        </SwiperSlide>\r\n                    )}\r\n                </Swiper>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Head;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Left_Bar.js",["141","142"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Left_Bar extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"left-bar\">\r\n                <div className=\"recommend\">\r\n                    <h3>Рекомендуемые</h3>\r\n                    <div>\r\n                        {this.props.data.map((recomend, key) =>\r\n                            <div className=\"slot-recommend\" key={key}>\r\n                                <Link to={\"/video_player/\" + recomend.id_video}>\r\n                                    <img src={recomend.poster_url || \"https://st.kp.yandex.net/images/no-poster.gif\"} />\r\n                                    <p>{recomend.title || recomend.title_en}</p>\r\n                                </Link>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Left_Bar;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\VideoPlayer.js",["143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175"],"import React, { useEffect, useState } from 'react';\r\nimport { Favorite, Send, InsertEmoticon, Visibility, VisibilityOff, ExpandMore } from '@mui/icons-material';\r\nimport \"../styles/VideoPlayerStyle.css\";\r\nimport \"../styles/stylecomment.css\";\r\nimport { Accordion, AccordionDetails, AccordionSummary, Button, ButtonGroup, Card, Popover } from '@mui/material';\r\nimport Film from './Template/Film';\r\nimport Loading from './Template/Loading';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getCookie } from '..';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst VideoPlayer = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [emoji, setEmoji] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const [actors, setActors] = useState([]);\r\n  const [data, setData] = useState(null);\r\n  const [seriesnum, setSeriesNum] = useState(null);\r\n  const [valueseries, setValueSeries] = useState(null);\r\n  const [episodes, setEpisodes] = useState([]);\r\n  const [seasons, setSeasons] = useState([]);\r\n  const [selectedButton, setSelectedButton] = useState(null);\r\n  const [comments, setComments] = useState([]);\r\n  const [viewed, setViewed] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  function GetEmojiList() {\r\n    // fetch('http://site.alwaysdata.net/emoji.php', {\r\n    //   method: 'POST',\r\n    // }).then(res => res.json())\r\n    //   .then(respons => {\r\n    //     this.setState({ emoji: respons });\r\n    //   });\r\n  }\r\n  function RenderActors() {\r\n    if (data.material_data != null)\r\n      if (data.material_data.actors != null)\r\n        return (data.material_data.actors.map((list, index) => {\r\n          let actor = actors[index];\r\n          if (actor != null) {\r\n            return (\r\n              <div key={index} className=\"slot-actor\" onClick={() => history.push(\"/actor/\" + actor.id)}>\r\n                <img src={actor.image} />\r\n                <p>{actor.name}</p>\r\n              </div>\r\n            );\r\n          } else {\r\n            return (\r\n              <div key={index} className=\"slot-actor\">\r\n                <img src={\"https://kdm.biz.ua/image/catalog/no%20foto.png\"} height=\"100\" />\r\n                <p>{list}</p>\r\n              </div>\r\n            );\r\n          }\r\n        }));\r\n  }\r\n\r\n  function SaveSeries(series, idvideo, link) {\r\n\r\n    setValueSeries(link);\r\n    setSeriesNum(series);\r\n    var form = new FormData();\r\n    form.append('series', series);\r\n    form.append('idvideo', idvideo);\r\n    form.append('table', localStorage.getItem(\"token\"));\r\n    // fetch('http://site.alwaysdata.net/resave.php', {\r\n    //   method: 'POST',\r\n    //   body: form,\r\n    // })\r\n  }\r\n\r\n  function getActors(actors) {\r\n    var form = new FormData();\r\n    form.append('actors', actors);\r\n    // fetch('http://site.alwaysdata.net/getdataactors.php', {\r\n    //   method: 'POST',\r\n    //   body: form,\r\n    // }).then(res => res.json())\r\n    //   .then(respons => {\r\n    //     this.setState({ actors: respons });\r\n    //   });\r\n  }\r\n\r\n  function GetData(list) {\r\n    setLoading(true);\r\n    fetch('https://kodikapi.com/search?token=9f97924b4aae53e816f330c113b08294&with_material_data=true&with_episodes=true&id=' + list)\r\n      .then(res => res.json())\r\n      .then(respons => {\r\n        let dataApi = respons.results[0];\r\n        setData(dataApi);\r\n\r\n        GetEmojiList();\r\n        // if (data.material_data != null)\r\n        //   this.getActors(data.material_data.actors);\r\n\r\n        var episodes = [];\r\n        if (dataApi != null) {\r\n          if (dataApi.seasons != null) {\r\n            var seasons = Object.keys(dataApi.seasons);\r\n            for (let i = 0; i < seasons.length; i++) {\r\n              episodes.push(Object.values(dataApi.seasons[seasons[i]].episodes));\r\n            }\r\n          }\r\n          setValueSeries(episodes.length > 0 ?\r\n            episodes[0][0] :\r\n            dataApi.link);\r\n          setEpisodes(episodes);\r\n          setSeasons(seasons);\r\n          setSeriesNum(episodes.length > 0 ? 1 : null);\r\n        }\r\n        document.title = dataApi.title;\r\n        setLoading(false);\r\n      });\r\n\r\n\r\n    var form = new FormData();\r\n    form.append('id', props.meta.match.params.id);\r\n    // fetch('http://site.alwaysdata.net/getcomments.php', {\r\n    //   method: 'POST',\r\n    //   body: form,\r\n    // }).then(res => res.json())\r\n    //   .then(respons => {\r\n    //     this.setState({ comments: respons });\r\n    //   });\r\n  }\r\n  function PastEmoji(emoji) {\r\n    var selObj = window.getSelection();\r\n    if (selObj.rangeCount > 0) {\r\n      var selRange = selObj.getRangeAt(0);\r\n      selRange.deleteContents();\r\n      document.execCommand('insertText', false, emoji);\r\n    }\r\n  }\r\n  function DateRegist(local) {\r\n    let lastvisit = new Date(Date.parse(local));\r\n    let totaldate = new Date(Date.now());\r\n    if (lastvisit.toLocaleDateString() === totaldate.toLocaleDateString()) {\r\n      if (lastvisit.getHours() == totaldate.getHours()) {\r\n        if (lastvisit.getMinutes() == totaldate.getMinutes()) {\r\n          return \"Только что!\";\r\n        }\r\n        return (totaldate.getMinutes() - lastvisit.getMinutes()) + \" минут назад\";\r\n      } else {\r\n        return (totaldate.getHours() - lastvisit.getHours()) + \" часов назад\";\r\n      }\r\n    } else {\r\n      if (lastvisit.getDay() == totaldate.getDay() - 1) {\r\n        return \"Вчера\";\r\n      } else {\r\n        return lastvisit.toLocaleDateString();\r\n      }\r\n    }\r\n  }\r\n  function SendComment() {\r\n    if (localStorage.getItem(\"token\") != null) {\r\n      if (this.input.current.value.length > 0 && this.input.current.value !== \"\" && this.input.current.value.trim()) {\r\n        let newcomment = {\r\n          Name: localStorage.getItem(\"name\"),\r\n          Comment: this.input.current.value,\r\n          Data: new Date(Date.now()).toUTCString(),\r\n          Avatar: localStorage.getItem(\"icon\"),\r\n          style: localStorage.getItem(\"style\"),\r\n        }\r\n        this.input.current.value = null;\r\n        this.setState({ comments: [newcomment, ...this.state.comments] });\r\n        var form = new FormData();\r\n        form.append('id', this.props.meta.match.params.id);\r\n        form.append('comments', JSON.stringify([newcomment, ...this.state.comments]));\r\n        // fetch('http://site.alwaysdata.net/comments.php', {\r\n        //   method: 'POST',\r\n        //   body: form,\r\n        // });\r\n\r\n      } else {\r\n        this.props.message('Комментарий не должен быть пустым!');\r\n      }\r\n    } else {\r\n      this.props.message('Эта функция доступна только авторизованным лицам!');\r\n    }\r\n  }\r\n\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    GetData(params.id);\r\n  }, [params.id])\r\n\r\n  /*useEffect(() => {\r\n    Watched(params.id);\r\n  }, [])*/\r\n\r\n  if (data == null) return <div>Загрузка данных....</div>\r\n\r\n  const dataObj = {\r\n    \"title\": data.title,\r\n    \"title_en\": data.title_orig,\r\n    \"year\": data.year,\r\n    \"poster_url\": data.material_data.poster_url,\r\n    \"id_video\": data.id,\r\n    \"countries\": data.material_data.countries,\r\n    \"genres\": data.material_data.genres,\r\n    \"duration\": data.material_data.duration,\r\n    \"discription\": data.material_data.description,\r\n    \"kinopoisk_rating\": data.material_data.kinopoisk_rating,\r\n    \"imdb_rating\": data.material_data.imdb_rating,\r\n    \"quality\": data.quality,\r\n  }\r\n\r\n  return (\r\n    <div className={\"central videoview\"}>\r\n      <Loading open={loading} />\r\n\r\n      <Film data={dataObj} {...props}/>\r\n\r\n      <hr></hr>\r\n      <div>\r\n        <p style={{ color: \"white\", margin: \"0\" }}>Актеры:</p>\r\n        <div className=\"actor-view\">\r\n          {RenderActors()}\r\n        </div>\r\n      </div>\r\n\r\n      <hr></hr>\r\n      {seriesnum != null && <h2 className=\"series\">Серия {seriesnum}</h2>}\r\n      <iframe src={valueseries} width=\"100%\" height=\"350\" frameBorder=\"0\" allowFullScreen allow=\"autoplay *; fullscreen *\"></iframe>\r\n\r\n\r\n      {seasons != null && seasons.map((seasons, key) =>\r\n        <Accordion key={key} style={{ borderColor: \"#474b4e\" }}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMore />}\r\n            aria-controls=\"panel1a-content\"\r\n            id=\"panel1a-header\"\r\n            style={{ backgroundColor: \"#262a2d\" }}\r\n          >\r\n            Сезон {seasons}\r\n          </AccordionSummary>\r\n\r\n          <AccordionDetails className=\"episodes-list\">\r\n            {episodes[key] != null ? episodes[key].map((episode, keys) => <button key={keys} className={seriesnum == (keys + 1) ? \"series-button series-active\" : \"series-button\"} onClick={() => { SaveSeries((keys + 1), data.id, episode); }}>{keys + 1}</button>) : \"\"}\r\n          </AccordionDetails>\r\n        </Accordion>\r\n      )}\r\n\r\n\r\n      <div className=\"comments\">\r\n        {/* <Popover id=\"popover-basic\">\r\n            <Popover.Title as=\"h3\">Смайлики</Popover.Title>\r\n            <Popover.Content>\r\n              {this.state.emoji.map((emoji, key) =>\r\n                <button onClick={() => this.PastEmoji(emoji)} key={key}>{emoji}</button>\r\n              )}\r\n            </Popover.Content>\r\n          </Popover> */}\r\n        {/* <InputGroup>\r\n            <FormControl placeholder=\"Введите комментарий...\" ref={this.input} />\r\n            <InputGroup.Append>\r\n              <Button variant=\"secondary\" ref={this.target} onClick={() => this.setState({ show: !this.state.show })}><InsertEmoticon style={{ fontSize: \"20px\" }} /></Button>\r\n              <Button variant=\"secondary\" onClick={() => this.SendComment()}><Send style={{ fontSize: \"20px\" }} /></Button>\r\n            </InputGroup.Append>\r\n          </InputGroup> */}\r\n        <div className=\"list-comment\">\r\n          {comments.map((comm, key) =>\r\n            <div key={key} className={(localStorage.getItem(\"name\") == comm.name ? \"my-comment\" : \"comment\") + \" \" + comm.style}>\r\n              <img src={comm.avatar} />\r\n              <div className=\"content\">\r\n                <h1>{comm.name}</h1>\r\n                <p>{comm.comment}</p>\r\n                <small>{DateRegist(comm.date)}</small>\r\n                <div className=\"angle\"></div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default VideoPlayer;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Top.js",["176","177","178","179","180","181"],"import { Table } from '@mui/material';\r\nimport React, { useState } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n    Redirect\r\n} from \"react-router-dom\";\r\n\r\nclass Top extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            TopElements: [],\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.GetTop();\r\n    }\r\n\r\n    GetTop() {\r\n        fetch('https://kodikapi.com/list?token=9f97924b4aae53e816f330c113b08294&with_material_data=true&translation_type=voice&year=2020&sort=kinopoisk_rating&limit=50', {\r\n            method: 'POST',\r\n        }).then(res => res.json())\r\n            .then(respons => {\r\n                respons.results.map(result => {\r\n                    this.setState(state => {\r\n                        return {\r\n                            TopElements: [...state.TopElements, {\r\n                                poster: result.material_data ?\r\n                                    <img src={result.material_data.poster_url} height=\"100px\" /> :\r\n                                    <img src={\"https://st.kp.yandex.net/images/no-poster.gif\"} height=\"100px\" />,\r\n                                title: <Link to={\"/video_player/\" + result.id}>{result.title}</Link>,\r\n                                link: result.link,\r\n                                year: result.year,\r\n                                quality: result.quality,\r\n                                genres: result.material_data ?\r\n                                    result.material_data.genres : null,\r\n                                kinopoisk_rating: result.material_data ?\r\n                                    result.material_data.kinopoisk_rating :\r\n                                    <p>Без оценки</p>\r\n                            }],\r\n                        }\r\n                    })\r\n                })\r\n                console.log(\"Top: \", this.state.TopElements);\r\n                console.log(\"Full: \", respons);\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"central\">\r\n\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Постер</th>\r\n                            <th>Название</th>\r\n                            <th>Год</th>\r\n                            <th>Качество</th>\r\n                            <th>Жанры</th>\r\n                            <th>Рейтинг</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.TopElements.map((post, key) =>\r\n                            <tr key={key}>\r\n                                <td>{key + 1}</td>\r\n                                <td>{post.poster}</td>\r\n                                <td>{post.title}</td>\r\n                                <td>{post.year}</td>\r\n                                <td>{post.quality}</td>\r\n                                <td>{post.genres.map((genres, key) => {\r\n                                    if (genres != null) {\r\n                                        return (\r\n                                            <div key={key} className=\"Tag\">\r\n                                                {genres}\r\n                                            </div>);\r\n                                    } else {\r\n                                        return (<p key={key}>Без распределений по жанрам</p>);\r\n                                    }\r\n                                })}\r\n                                </td>\r\n                                <td>{post.kinopoisk_rating}</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Top;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\BD.js",["182","183","184","185"],"import React, { useState } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport { Button } from '@mui/material';\r\n\r\nclass BD extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            referrer: null,\r\n            Content: [],\r\n            ValuePage: null,\r\n            pageSize: 5,\r\n            page: 1,\r\n            type: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.RenderDB(0, 0, this.state.pageSize);\r\n    }\r\n\r\n    DeleteFilm(name, id) {\r\n        if (window.confirm(\"Вы действительно желаете удалить видеозапись, \" + name + \"?\")) {\r\n            var form = new FormData();\r\n            form.append('id', id);\r\n            form.append('token', localStorage.getItem(\"token\"));\r\n            fetch(\"http://site.alwaysdata.net/deleteeditor.php\", {\r\n                method: 'POST',\r\n                body: form,\r\n            });\r\n            this.props.message(\"Успешное удаление: '\" + name + \"'\");\r\n            this.RenderDB(this.state.type, this.state.page, this.state.pageSize);\r\n        }\r\n    }\r\n\r\n    RenderDB(type, Page, pageSize) {\r\n        var form = new FormData();\r\n        form.append('type', type);\r\n        form.append('page', Page);\r\n        form.append('pagesize', pageSize);\r\n\r\n        fetch(\"http://site.alwaysdata.net/dbdatavideo.php\", {\r\n            method: 'POST',\r\n            body: form,\r\n        }).then(res => res.json())\r\n            .then(respons => {\r\n                this.setState({ Content: respons.video, ValuePage: respons.length, pageSize: pageSize });\r\n                //console.log(respons);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const data = this.state.Content;\r\n        if (!data) { return <div>Загрузка данных....</div> }\r\n\r\n        const { referrer } = this.state;\r\n        if (referrer) return <Redirect to={referrer} />;\r\n        return (\r\n            <Router>\r\n                <div className=\"central\">\r\n                    {this.state.Content.map((post, key) => {\r\n                        if (post.title != null) {\r\n                            return (\r\n                                <div key={key} className=\"post-slot\">\r\n                                    <Button className=\"ForeverVideo\" onClick={() => { this.setState({ referrer: \"/edaeditor/\" + post.id_video }) }}>\r\n                                        <Link to={\"/edaeditor/\" + post.id_video}>\r\n                                            <EditIcon style={{ color: \"white\" }} />\r\n                                        </Link>\r\n                                    </Button>\r\n                                    <Button variant=\"danger\" className=\"ForeverVideo\" style={{ marginRight: \"60px\" }} onClick={() => {this.DeleteFilm(post.title, post.id_video);}}>\r\n                                        <DeleteIcon />\r\n                                    </Button>\r\n                                    <a className=\"post-slot-button\">{post.title}</a>\r\n                                    <img src={post.poster} height=\"200px\" />\r\n                                    {post.year != null ?\r\n                                        <div className=\"info_panel\">\r\n                                            <p>Год: {post.year}</p>\r\n                                            <p>Страна: {post.countries}</p>\r\n                                            <p>Жанры: {post.genres}</p>\r\n                                            <p>Продолжительность: {post.duration} мин.</p>\r\n                                            <br />\r\n                                            <p>{post.discription != null && post.discription}</p>\r\n                                            <p className=\"kino_poisk\">КиноПоиск: {post.kinopoisk_rating}</p>\r\n                                            <p className=\"imdb\">Imdb: {post.imdb_rating}</p>\r\n                                            <p className=\"quality\">{post.quality}</p>\r\n                                        </div>\r\n                                        :\r\n                                        <p style={{ color: \"white\" }}>Нет информации!</p>\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        }\r\n                    })}\r\n\r\n                    <Pagination\r\n                        className=\"pagination\"\r\n                        count={Math.ceil(this.state.ValuePage / 5)}\r\n                        page={this.state.page}\r\n                        siblingCount={3}\r\n                        boundaryCount={2}\r\n                        onChange={(event, page) => {\r\n                            this.RenderDB(this.state.type, page - 1, this.state.pageSize);\r\n                            window.scrollTo(0, 0);\r\n                            this.setState({ page: page });\r\n                        }} />\r\n                </div>\r\n            </Router >\r\n        );\r\n    }\r\n}\r\n\r\nexport default BD;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Actors.js",["186","187","188","189","190","191"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n} from \"react-router-dom\";\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport { Button } from '@mui/material';\r\nimport { getCookie } from '..';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ActorSlot from './Template/ActorSlot';\r\n\r\nconst Actors = (props) => {\r\n    const [data, setData] = useState([]);\r\n    const [count, setCount] = useState(0);\r\n    const [pageSize, setPageSize] = useState(5);\r\n    const [page, setPage] = useState(1);\r\n\r\n    function RenderDB(page, pageSize) {\r\n        fetch(\"http://site.alwaysdata.net/api/get_actors.php\", {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                \"jwt\": getCookie(\"jwt\"),\r\n                \"page\": page,\r\n                \"pageSize\": pageSize\r\n            }),\r\n        }).then(res => res.json())\r\n            .then(respons => {\r\n                setData(respons.actors);\r\n                setCount(respons.count);\r\n                //console.log(respons);\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        RenderDB(0, pageSize);\r\n        window.scrollTo(0, 0);\r\n    }, [])\r\n\r\n    const history = useHistory();\r\n\r\n    if (!data) { return <div>Загрузка данных....</div> }\r\n    return (\r\n        <div className=\"central\">\r\n            <Button style={{ width: \"100%\", margin: \"5px 0\" }} onClick={() => history.push(\"/edaactor/new\")}>Добавить</Button>\r\n            {data.map((post, key) =>\r\n                <ActorSlot key={key} data={post} />\r\n            )}\r\n\r\n            <Pagination\r\n                className=\"pagination\"\r\n                count={Math.ceil(count / 5)}\r\n                page={page}\r\n                siblingCount={3}\r\n                boundaryCount={2}\r\n                onChange={(event, page) => {\r\n                    RenderDB(page - 1, pageSize);\r\n                    window.scrollTo(0, 0);\r\n                    setPage(page);\r\n                }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Actors;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Searth.js",["192","193","194","195"],"import React, { useEffect, useState } from 'react';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport { Button, Typography } from '@mui/material';\r\nimport Film from './Template/Film';\r\n\r\nconst Search = (props) => {\r\n    const [pageSize, setPageSize] = useState(5);\r\n    const [page, setPage] = useState(1);\r\n\r\n    function onShowSizeChange(current, pagesize) {\r\n        setPageSize(pagesize);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = \"Поиск по сайту: \" + props.search;\r\n    }, [props.search])\r\n\r\n    const data = props.ContentVideo;\r\n    if (!data) {\r\n        return <div className=\"central\">\r\n            <h2 style={{ color: \"white\" }}>Поиск по сайту: нет результатов!</h2>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"central\">\r\n            <Typography variant='h5' color={\"white\"}>Поиск по сайту: {props.search}</Typography>\r\n            {data.map((post, key) =>\r\n                <Film key={key} data={post} props={props} />\r\n            )}\r\n            {data.length == 0 && <Typography color={\"whitesmoke\"}>Не дало результатов</Typography>}\r\n\r\n            <Pagination\r\n                className=\"pagination\"\r\n                count={Math.ceil(props.Value / 5)}\r\n                page={page}\r\n                siblingCount={3}\r\n                boundaryCount={2}\r\n                onChange={(event, page) => {\r\n                    props.SearchFunc(page - 1, pageSize, props.search);\r\n                    window.scrollTo(0, 0);\r\n                    setPage(page);\r\n                }} />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Watched.js",["196","197","198","199","200","201","202"],"import React, { useEffect, useState } from 'react';\r\nimport { VisibilityOff } from '@mui/icons-material';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport Pagination from '@mui/material/Pagination';\r\nimport { Button } from '@mui/material';\r\nimport { getCookie } from '..';\r\nimport Film from './Template/Film';\r\n\r\nconst Watched = (props) => {\r\n    const [data, setData] = useState(null);\r\n    const [pageSize, setPageSize] = useState(5);\r\n    const [page, setPage] = useState(1);\r\n\r\n    function RenderDB(page, pageSize) {\r\n        fetch(\"http://site.alwaysdata.net/api/get_watched.php\", {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                \"jwt\": getCookie(\"jwt\"),\r\n                \"page\": page,\r\n                \"pageSize\": pageSize\r\n            }),\r\n        }).then(response => response.json())\r\n            .then(respons => {\r\n                setData(respons)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        RenderDB(0, pageSize);\r\n        window.scrollTo(0, 0);\r\n    }, [])\r\n\r\n    if (!data) { return <div>Загрузка данных....</div> }\r\n\r\n    return (\r\n        <div className=\"central\">\r\n            {data.posts.map((post, key) =>\r\n                <Film key={key} data={post} {...props} />\r\n            )}\r\n\r\n            <Pagination\r\n                className=\"pagination\"\r\n                count={Math.ceil(data.count / pageSize)}\r\n                page={page}\r\n                siblingCount={3}\r\n                boundaryCount={2}\r\n                onChange={(event, page) => {\r\n                    RenderDB(page - 1, pageSize);\r\n                    window.scrollTo(0, 0);\r\n                    setPage(page);\r\n                }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Watched;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Login.js",["203","204","205","206","207","208","209","210","211"],"import React, { useState } from 'react';\r\nimport ExitToAppIcon from '@mui/icons-material/ExitToApp';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Link, Modal, TextField } from '@mui/material';\r\nimport { logout, setCookie } from \"../index\";\r\n\r\nconst Login = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const [showreg, setShowreg] = useState(false);\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const onLogin = (e) => {\r\n    e.preventDefault();\r\n    fetch('http://site.alwaysdata.net/api/login.php', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        'email': email,\r\n        'password': password\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        if (respons.token != null) {\r\n          setCookie(\"jwt\", respons.token, 1);\r\n          fetch('http://site.alwaysdata.net/api/validate_token.php', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              'jwt': respons.token,\r\n            }),\r\n          }).then(e => e.json()).then(v => {\r\n            if (v.message == \"Access granted.\") {\r\n              localStorage.setItem(\"name\", v.data.name);\r\n              localStorage.setItem(\"admin\", v.data.admin);\r\n              localStorage.setItem(\"email\", v.data.email);\r\n              //localStorage.setItem(\"icon\", v.data.icon);\r\n              //localStorage.setItem(\"style\", v.data.style);\r\n              props.message('Успех!');\r\n            } else {\r\n              logout();\r\n              props.message('Ошибка входа!');\r\n            }\r\n          });\r\n        } else {\r\n          props.message('Не правильный логин или пароль!');\r\n        }\r\n      })\r\n  };\r\n\r\n  const onRegister = (e) => {\r\n    e.preventDefault();\r\n    fetch('http://site.alwaysdata.net/api/create_user.php', {\r\n      method: 'POST',\r\n      contentType: 'application/json',\r\n      body: JSON.stringify({\r\n        'email': email,\r\n        'password': password,\r\n        'name': name,\r\n      }),\r\n    }).then(e => e.json()).then(v => {\r\n      if (v.message == \"User was created.\") {\r\n        props.message('Успех!');\r\n      } else {\r\n        props.message(v.message);\r\n      }\r\n    })\r\n    setShowreg(false);\r\n  };\r\n\r\n  const showModal = () => { setShow(true); setShowreg(false) };\r\n  const showModalreg = () => { setShow(false); setShowreg(true) };\r\n\r\n  const handleClose = () => setShow(false);\r\n\r\n  const handleCloseReg = () => setShowreg(false);\r\n\r\n  return (\r\n    <div style={{ position: \"static\" }}>\r\n      <Button className=\"reg\" color=\"warning\" onClick={() => showModalreg()}>Регистрация</Button>\r\n      <Button color=\"warning\" className=\"auth\" onClick={() => showModal()}>\r\n        <ExitToAppIcon style={{ marginRight: \"5px\", fontSize: \"15px\" }} />\r\n        <span>Войти</span>\r\n      </Button>\r\n      <Dialog open={show} onClose={() => handleClose()} maxWidth=\"xs\">\r\n        <DialogTitle>Авторизация</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"login\"\r\n            label=\"Логин\"\r\n            type=\"email\"\r\n            fullWidth\r\n            variant=\"standard\"\r\n            value={email}\r\n            onChange={(v) => setEmail(v.target.value)}\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            id=\"password\"\r\n            label=\"Пароль\"\r\n            type=\"password\"\r\n            fullWidth\r\n            variant=\"standard\"\r\n            value={password}\r\n            onChange={(v) => setPassword(v.target.value)}\r\n          />\r\n          <Button fullWidth color='secondary' onClick={(e) => onLogin(e)}>Войти</Button>\r\n          <p style={{ textAlign: \"center\" }}>Если у вас все еще нет аккаунта, то вы можете его зарегестрировать нажав <a className=\"link-redirect\" onClick={() => showModalreg()}>сюда!</a></p>\r\n        </DialogContent>\r\n        {/* <DialogActions>\r\n        </DialogActions> */}\r\n      </Dialog>\r\n\r\n      <Dialog open={showreg} onClose={() => handleCloseReg()} maxWidth=\"xs\">\r\n        <DialogTitle >Регистрация</DialogTitle>\r\n        <DialogContent>\r\n\r\n          <DialogContentText>\r\n            Зарегистрируйте аккаунт чтобы получить дополнительные возможности сайта, например воспользоваться функцией избанных\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"login\"\r\n            label=\"Логин\"\r\n            type=\"email\"\r\n            fullWidth\r\n            variant=\"standard\"\r\n            value={email}\r\n            onChange={(v) => setEmail(v.target.value)}\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            id=\"password\"\r\n            label=\"Пароль\"\r\n            type=\"password\"\r\n            fullWidth\r\n            variant=\"standard\"\r\n            value={password}\r\n            onChange={(v) => setPassword(v.target.value)}\r\n          />\r\n          <TextField\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Имя пользователя\"\r\n            type=\"text\"\r\n            fullWidth\r\n            variant=\"standard\"\r\n            value={name}\r\n            onChange={(v) => setName(v.target.value)}\r\n          />\r\n          <Button fullWidth color='secondary' onClick={(e) => onRegister(e)}>Зарегистрироваться</Button>\r\n\r\n          <p style={{ textAlign: \"center\" }}>Если у вас уже есть аккаунт, то вы можете войти нажав <a className=\"link-redirect\" onClick={() => showModal()}>сюда!</a>\r\n          </p>\r\n        </DialogContent>\r\n        {/* <DialogActions>\r\n        </DialogActions> */}\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Profile.js",["212","213","214","215","216"],"import { AutoAwesomeMotion, Favorite, Logout, Settings, Storage } from '@mui/icons-material';\r\nimport { Avatar, ListItemIcon, Menu, MenuItem, Tooltip, Typography } from '@mui/material';\r\nimport React, { useState } from 'react';\r\nimport { getCookie, logout, setCookie } from '..';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Profile = () => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const history = useHistory();\r\n  let name = localStorage.getItem(\"name\");\r\n  return (\r\n    <Tooltip title=\"Профиль\">\r\n      <>\r\n        <div className=\"profile\">\r\n          <Avatar src={localStorage.getItem(\"icon\")}\r\n            width={\"25px\"}\r\n            height={\"25px\"}\r\n            alt={name}\r\n            style={{ marginRight: 5 }}\r\n          />\r\n          <Typography onClick={handleClick} color=\"white\">{name}</Typography>\r\n        </div>\r\n\r\n        <Menu\r\n          anchorEl={anchorEl}\r\n          id=\"account-menu\"\r\n          open={open}\r\n          onClose={handleClose}\r\n          onClick={handleClose}\r\n          PaperProps={{\r\n            elevation: 0,\r\n            sx: {\r\n              overflow: 'visible',\r\n              filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\r\n              mt: 1.5,\r\n              '& .MuiAvatar-root': {\r\n                width: 32,\r\n                height: 32,\r\n                ml: -0.5,\r\n                mr: 1,\r\n              },\r\n              '&:before': {\r\n                content: '\"\"',\r\n                display: 'block',\r\n                position: 'absolute',\r\n                top: 0,\r\n                right: 14,\r\n                width: 10,\r\n                height: 10,\r\n                bgcolor: 'background.paper',\r\n                transform: 'translateY(-50%) rotate(45deg)',\r\n                zIndex: 0,\r\n              },\r\n            },\r\n          }}\r\n          transformOrigin={{ horizontal: 'right', vertical: 'top' }}\r\n          anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n        >\r\n          {localStorage.getItem(\"admin\") == 1 &&\r\n            <MenuItem onClick={() => history.push('/edit-database')}>\r\n              <ListItemIcon>\r\n                <Storage fontSize=\"small\" />\r\n              </ListItemIcon>\r\n              Управление базой\r\n            </MenuItem>\r\n          }\r\n          {localStorage.getItem(\"admin\") == 1 &&\r\n            <MenuItem onClick={() => history.push('/edit-actors')}>\r\n              <ListItemIcon>\r\n                <Storage fontSize=\"small\" />\r\n              </ListItemIcon>\r\n              Управление актерами\r\n            </MenuItem>\r\n          }\r\n          <MenuItem onClick={() => history.push('')}>\r\n            <ListItemIcon>\r\n              <Settings fontSize=\"small\" />\r\n            </ListItemIcon>\r\n            Управление аккаунтом\r\n          </MenuItem>\r\n          <MenuItem onClick={() => history.push('/favorites')}>\r\n            <ListItemIcon>\r\n              <Favorite fontSize=\"small\" />\r\n            </ListItemIcon>\r\n            Избранные\r\n          </MenuItem>\r\n          <MenuItem onClick={() => history.push(\"/watched\")}>\r\n            <ListItemIcon>\r\n              <AutoAwesomeMotion fontSize=\"small\" />\r\n            </ListItemIcon>\r\n            Просмотренные\r\n          </MenuItem>\r\n          <MenuItem onClick={() => logout()}>\r\n            <ListItemIcon>\r\n              <Logout fontSize=\"small\" />\r\n            </ListItemIcon>\r\n            Выход\r\n          </MenuItem>\r\n        </Menu>\r\n      </>\r\n    </Tooltip>\r\n  );\r\n}\r\nexport default Profile;\r\n","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\EditPage.js",["217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"import React from 'react';\r\nimport \"../../styles/EditPage.css\";\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport { Accordion, Button } from '@mui/material';\r\n\r\nclass EditPage extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      referrer: null,\r\n      Info: null,\r\n      message: null,\r\n      countrieslist: [],\r\n      genreslist: [],\r\n    };\r\n  }\r\n\r\n  Init() {\r\n    try {\r\n      let data = this.state.Info;\r\n\r\n      this.title.value = data.title;\r\n      this.title_orig.value = data.title_orig;\r\n      this.poster.value = data.poster;\r\n      this.year.value = data.year;\r\n      this.setState({ countrieslist: data.countries.split(\",\") });\r\n      this.setState({ genreslist: data.genres.split(\",\") });\r\n      this.duration.value = data.duration;\r\n      this.description.value = data.discription;\r\n      this.kinopoisk_rating.value = data.kinopoisk_rating;\r\n      this.imdb_rating.value = data.imdb_rating;\r\n      this.quality.value = data.quality;\r\n      this.actors.value = data.actors;\r\n      this.directors.value = data.directors;\r\n      this.producers.value = data.producers;\r\n      this.writers.value = data.writers;\r\n      this.composers.value = data.composers;\r\n      this.editors.value = data.editors;\r\n      this.designers.value = data.designers;\r\n      this.operators.value = data.operators;\r\n    } catch {\r\n      this.setState({ referrer: \"/\" });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.meta.match.params.id !== this.props.meta.match.params.id) {\r\n      this.GetData(this.props.meta.match.params.id);\r\n    }\r\n  }\r\n\r\n  GetData(id) {\r\n    var form = new FormData();\r\n    form.append('id', id);\r\n    form.append('token', localStorage.getItem(\"token\"));\r\n    fetch(\"http://site.alwaysdata.net/editorview.php\", {\r\n      method: 'POST',\r\n      body: form,\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        if (respons != null) {\r\n          this.setState({ Info: respons });\r\n        } else {\r\n          this.setState({ referrer: \"/\" });\r\n        }\r\n        //console.log(respons);\r\n        this.Init();\r\n      })\r\n  }\r\n\r\n  saveInfo(id) {\r\n    console.log(this.state);\r\n    var form = new FormData();\r\n    form.append('id', id);\r\n\r\n    form.append('title', this.title.value);\r\n    form.append('title_orig', this.title_orig.value);\r\n    form.append('image', this.poster.value);\r\n    form.append('year', this.year.value);\r\n    form.append('countries', this.state.countrieslist);\r\n    form.append('genres', this.state.genreslist);\r\n    form.append('duration', this.duration.value);\r\n    form.append('description', this.description.value);\r\n    form.append('kinopoisk_rating', this.kinopoisk_rating.value);\r\n    form.append('imdb_rating', this.imdb_rating.value);\r\n    form.append('quality', this.quality.value);\r\n    form.append('actors', this.actors.value);\r\n    form.append('directors', this.directors.value);\r\n    form.append('producers', this.producers.value);\r\n    form.append('writers', this.writers.value);\r\n    form.append('composers', this.composers.value);\r\n    form.append('editors', this.editors.value);\r\n    form.append('designers', this.designers.value);\r\n    form.append('operators', this.operators.value);\r\n\r\n    form.append('token', localStorage.getItem(\"token\"));\r\n    fetch(\"http://site.alwaysdata.net/saveeditor.php\", {\r\n      method: 'POST',\r\n      body: form,\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        if (respons != null) {\r\n          this.setState({ message: respons.message });\r\n          this.props.message(respons.message);\r\n        } else {\r\n          this.setState({ referrer: \"/\" });\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { referrer } = this.state;\r\n    if (referrer) return <Redirect to={referrer} />;\r\n\r\n    let data = this.state.Info;\r\n\r\n    if (data == null) {\r\n      this.GetData(this.props.meta.match.params.id);\r\n      return <div>Загрузка данных....</div>\r\n    }\r\n\r\n    return (\r\n      <div className={\"central videoview\"}>\r\n        <p className=\"post-slot-button post-slot-buttonview editor-title\"><input placeholder={data.title} ref={el => this.title = el} /></p>\r\n        <p className=\"original-title editor-title\"><input placeholder={data.title_orig} ref={el => this.title_orig = el} /></p>\r\n        <Button className=\"ForeverVideo\" style={{ top: \"-32px\" }} onClick={() => this.saveInfo(data.id_video)}><SaveIcon /></Button>\r\n        <img style={{ float: \"left\", padding: \"3px\" }} src={data.poster} height=\"200px\" width=\"auto\" ref={el => { this.image = el; }} />\r\n        <input className={\"editor-poster\"} placeholder={data.poster} onChange={(e) => { e.target.value != \"\" ? this.image.src = e.target.value : this.image.src = data.poster; console.log(this.image); }} ref={el => this.poster = el} />\r\n        <div className=\"info-videoview\">\r\n          <p>Год: <input className={\"editor-input\"} placeholder={data.year} ref={el => this.year = el} /></p>\r\n          <p>Страна: <input className={\"editor-input\"} placeholder={data.countries != \"\" ? data.countries : \"\"} ref={el => this.countries = el} />\r\n            <button className={\"add-item\"} onClick={() => {\r\n              this.setState({ countrieslist: [...this.state.countrieslist, this.countries.value] });\r\n              this.countries.value = null;\r\n            }\r\n            }>+</button>\r\n          </p>\r\n          <div className=\"data-list\">\r\n            {this.state.countrieslist.map((countrie, key) => {\r\n              return (\r\n                <div className=\"Tag\" key={key}>\r\n                  {countrie}\r\n                  <button className={\"delete-item\"} onClick={() =>\r\n                    this.setState({ countrieslist: this.state.countrieslist.filter((_, i) => i !== key) })\r\n                  }>\r\n                    <CloseIcon style={{ fontSize: \"12px\" }} />\r\n                  </button>\r\n                </div>\r\n              );\r\n            }\r\n            )}\r\n          </div>\r\n          <p>Жанры: <input className={\"editor-input\"} placeholder={data.genres != \"\" ? data.genres : \"\"} ref={el => this.genres = el} />\r\n            <button className={\"add-item\"} onClick={() => {\r\n              this.setState({ genreslist: [...this.state.genreslist, this.genres.value] });\r\n              this.genres.value = null;\r\n            }\r\n            }>+</button>\r\n            <div className=\"data-list\">\r\n              {this.state.genreslist.map((genres, key) => {\r\n                return (\r\n                  <div className=\"Tag\" key={key}>\r\n                    {genres}\r\n                    <button className={\"delete-item\"} onClick={() =>\r\n                      this.setState({ genreslist: this.state.genreslist.filter((_, i) => i !== key) })\r\n                    }>\r\n                      <CloseIcon style={{ fontSize: \"12px\" }} />\r\n                    </button>\r\n                  </div>\r\n                );\r\n              }\r\n              )}\r\n            </div>\r\n          </p>\r\n          <p>Продолжительность: <input className={\"editor-input\"} placeholder={data.duration} ref={el => this.duration = el} /> мин.</p>\r\n          <br />\r\n          <p>Описание: <textarea className={\"editor-area\"} placeholder={data.description != \"\" && data.description} ref={el => this.description = el} /></p>\r\n          <p className={\"rating-info\"} style={{ top: 0 }}>КиноПоиск: <input className={\"editor-input\"} placeholder={data.kinopoisk_rating} style={{ width: \"200px\" }} ref={el => this.kinopoisk_rating = el} /></p>\r\n          <p className={\"rating-info\"} style={{ top: \"30px\" }}>Imdb: <input className={\"editor-input\"} placeholder={data.imdb_rating} style={{ width: \"200px\" }} ref={el => this.imdb_rating = el} /></p>\r\n          <p className={\"rating-info\"} style={{ top: \"60px\", color: \"green\" }}>Качество: <input className={\"editor-input\"} placeholder={data.quality} style={{ width: \"200px\" }} ref={el => this.quality = el} /></p>\r\n        </div>\r\n        <hr></hr>\r\n        <iframe src={data.link + \"?hide_selectors=true\"} width=\"100%\" height=\"350\" frameborder=\"0\" allowfullscreen allow=\"autoplay *; fullscreen *\"></iframe>\r\n        <Accordion>\r\n          {/*seasons != null ? seasons.map((seasons, key) => {\r\n            return (\r\n              <Card key={key} style={{ borderColor: \"#474b4e\" }}>\r\n                <Card.Header style={{ backgroundColor: \"#262a2d\" }}>\r\n                  <Accordion.Toggle as={Button} variant=\"link\" style={{ width: \"100%\" }} eventKey={seasons}>\r\n                    Сезон {seasons}\r\n                  </Accordion.Toggle>\r\n                </Card.Header>\r\n\r\n                <Accordion.Collapse eventKey={seasons}>\r\n                  <Card.Body className=\"episodes-list\">\r\n                    {episodes != null ? episodes.map((episode, keys) => <button className={this.state.seriesnum == (keys + 1) ? \"series-button series-active\" : \"series-button\"} onClick={() => { this.SaveSeries((keys + 1), data.id, episode); }}>{keys + 1}</button>) : \"\"}\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            );\r\n          }) : \"\"*/}\r\n        </Accordion>\r\n\r\n        <div className={\"dop-info\"}>\r\n          <p>Актеры: <textarea className={\"editor-area\"} placeholder={data.actors != \"\" ? data.actors : \"\"} ref={el => this.actors = el} /></p>\r\n          <p>Режиссеры: <textarea className={\"editor-area\"} placeholder={data.directors != \"\" ? data.directors : \"\"} ref={el => this.directors = el} /></p>\r\n          <p>Продюссеры: <textarea className={\"editor-area\"} placeholder={data.producers != \"\" ? data.producers : \"\"} ref={el => this.producers = el} /></p>\r\n          <p>Сценаристы: <textarea className={\"editor-area\"} placeholder={data.writers != \"\" ? data.writers : \"\"} ref={el => this.writers = el} /></p>\r\n          <p>Композиторы: <textarea className={\"editor-area\"} placeholder={data.composers != \"\" ? data.composers : \"\"} ref={el => this.composers = el} /></p>\r\n          <p>Монтажеры: <textarea className={\"editor-area\"} placeholder={data.editors != \"\" ? data.editors : \"\"} ref={el => this.editors = el} /></p>\r\n          <p>Художники: <textarea className={\"editor-area\"} placeholder={data.designers != \"\" ? data.designers : \"\"} ref={el => this.designers = el} /></p>\r\n          <p>Операторы: <textarea className={\"editor-area\"} placeholder={data.operators != \"\" ? data.operators : \"\"} ref={el => this.operators = el} /></p>\r\n        </div>\r\n      </div >\r\n    );\r\n  };\r\n}\r\n\r\nexport default EditPage;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\EditActors.js",["233","234","235","236","237","238","239","240","241"],"import React, { useEffect, useState } from 'react';\r\nimport \"../../styles/EditPage.css\";\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport { Button } from '@mui/material';\r\nimport { getCookie } from '../..';\r\n\r\nconst EditActors = (props) => {\r\n\r\n  const [data, setData] = useState(null);\r\n\r\n  function GetData(id) {\r\n    fetch(\"http://site.alwaysdata.net/api/get_actor.php\", {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        \"id\": id,\r\n        \"jwt\": getCookie(\"jwt\"),\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        if (respons.status == 200) {\r\n          setData(respons.info);\r\n        }\r\n      })\r\n  }\r\n\r\n  function onSave(id) {\r\n    fetch(\"http://site.alwaysdata.net/api/create_actor.php\", {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        \"type\": props.meta.match.params.id == \"new\" ? 1 : 0,\r\n        \"id\": id,\r\n        \"name\": data.name,\r\n        \"date_of_birth\": data.date_of_birth,\r\n        \"growth\": data.growth,\r\n        \"image\": data.image,\r\n        \"jwt\": getCookie(\"jwt\")\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        if (respons.status == 200)\r\n          props.message(\"Successful\");\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    setData({\r\n      name: \"Имя\",\r\n      date_of_birth: \"Дата рождения\",\r\n      growth: \"Рост\",\r\n      image: \"https://st.kp.yandex.net/images/no-poster.gif\"\r\n    });\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (props.meta.match.params.id != \"new\")\r\n      GetData(props.meta.match.params.id);\r\n    window.scrollTo(0, 0);\r\n  }, [props.meta.match.params.id])\r\n\r\n  if (data == null) return <div>Загрузка данных....</div>\r\n\r\n  return (\r\n    <div className={\"central videoview\"}>\r\n      <p className=\"post-slot-button post-slot-buttonview editor-title\">\r\n        <input\r\n          placeholder={data.name}\r\n          onChange={(e) => setData(old => ({\r\n            \"name\": e.target.value,\r\n            \"date_of_birth\": old.date_of_birth,\r\n            \"growth\": old.growth,\r\n            \"image\": old.image\r\n          }))} />\r\n      </p>\r\n      <Button className=\"ForeverVideo\" style={{ top: \"-32px\" }} onClick={() => onSave(props.meta.match.params.id)}>\r\n        <SaveIcon />\r\n      </Button>\r\n      <img style={{ float: \"left\", padding: \"3px\" }} src={data.image} height=\"200px\" width=\"auto\" />\r\n      <input className={\"editor-poster\"}\r\n        placeholder={data.image}\r\n        onChange={(e) => setData(old => ({\r\n          \"name\": old.name,\r\n          \"date_of_birth\": old.date_of_birth,\r\n          \"growth\": old.growth,\r\n          \"image\": e.target.value\r\n        }))}\r\n      />\r\n      <div className=\"info-videoview\">\r\n        <p>Дата рождения: <input\r\n          className={\"editor-input\"}\r\n          placeholder={data.date_of_birth}\r\n          onChange={(e) => setData(old => ({\r\n            \"name\": old.name,\r\n            \"date_of_birth\": e.target.value,\r\n            \"growth\": old.growth,\r\n            \"image\": old.image\r\n          }))}\r\n        /></p>\r\n        <p>Рост: <input\r\n          className={\"editor-input\"}\r\n          placeholder={data.growth}\r\n          onChange={(e) => setData(old => ({\r\n            \"name\": old.name,\r\n            \"date_of_birth\": old.date_of_birth,\r\n            \"growth\": e.target.value,\r\n            \"image\": old.image\r\n          }))} /> м</p>\r\n      </div>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default EditActors;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\ActorSearth.js",["242","243","244","245","246"],"import React from 'react';\r\nimport \"../../styles/EditPage.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport { Button } from '@mui/material';\r\n\r\nclass ActorSearth extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      referrer: null,\r\n      pageSize: 5,\r\n      page: 1,\r\n      Posts: null,\r\n      PostValue: null,\r\n      Info: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.meta.match.params.id !== this.props.meta.match.params.id) {\r\n      this.GetData(this.props.meta.match.params.id, 0, this.state.pageSize);\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }\r\n\r\n  GetData(id, Page, pageSize) {\r\n    var form = new FormData();\r\n    form.append('id', id);\r\n    form.append('page', Page);\r\n    form.append('pagesize', pageSize);\r\n    fetch(\"http://site.alwaysdata.net/searthactor.php\", {\r\n      method: 'POST',\r\n      body: form,\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        this.setState({ Posts: respons.video, PostValue: respons.length, Info: respons.info });\r\n        console.log(respons);\r\n      })\r\n  }\r\n\r\n\r\n  render() {\r\n    const { referrer } = this.state;\r\n    if (referrer) return <Redirect to={referrer} />;\r\n\r\n    let data = this.state.Info;\r\n    let post = this.state.Posts;\r\n\r\n    if (data == null || post == null) {\r\n      this.GetData(this.props.meta.match.params.id, 0, this.state.pageSize);\r\n      return <div>Загрузка данных....</div>\r\n    }\r\n\r\n    return (\r\n      <div className={\"central videoview\"}>\r\n        <p className=\"post-slot-button post-slot-buttonview\">{data.Name}</p>\r\n        <img style={{ float: \"left\", padding: \"3px\" }} src={data.Image} height=\"200px\" width=\"auto\" />\r\n        <div className=\"info-videoview\" style={{ minHeight: \"200px\" }}>\r\n          <p>Дата рождения: {data.Date}</p>\r\n          <p>Рост: {data.Growth} м</p>\r\n        </div>\r\n\r\n        <h4 style={{ color: \"white\" }}>Найдено записей: {this.state.PostValue}</h4>\r\n        <div style={{ padding: \"15px\" }}>\r\n          {post.map((post, key) => {\r\n            if (post.title != null) {\r\n              return (\r\n                <div key={key} className=\"post-slot\">\r\n\r\n                  <Button className=\"ForeverVideo\" onClick={() => {\r\n                    if (localStorage.getItem(\"name\")) {\r\n                      this.props.SetSave(post.title, post.id_video, post.poster != null ? post.poster : 'https://st.kp.yandex.net/images/no-poster.gif');\r\n                    } else { this.props.message('Эта функция доступна только авторизованным лицам!'); }\r\n                  }}>\r\n                    <FavoriteIcon />\r\n                  </Button>\r\n\r\n                  <a className=\"post-slot-button\" href={\"/video_player/\" + post.id_video}>{post.title}</a>\r\n                  <img src={post.poster} height=\"200px\" />\r\n                  {post.year != null ?\r\n                    <div className=\"info_panel\">\r\n                      <p>Год: {post.year}</p>\r\n                      <p>Страна: {post.countries}</p>\r\n                      <p>Жанры: {post.genres}</p>\r\n                      <p>Продолжительность: {post.duration} мин.</p>\r\n                      <br />\r\n                      <p>{post.discription != null && post.discription}</p>\r\n                      <p className=\"kino_poisk\">КиноПоиск: {post.kinopoisk_rating}</p>\r\n                      <p className=\"imdb\">Imdb: {post.imdb_rating}</p>\r\n                      <p className=\"quality\">{post.quality}</p>\r\n                    </div>\r\n                    :\r\n                    <p style={{ color: \"white\" }}>Нет информации!</p>}\r\n                </div>\r\n              )\r\n            }\r\n          })}\r\n\r\n          <Pagination\r\n            className=\"pagination\"\r\n            count={Math.ceil(this.state.PostValue / 5)}\r\n            page={this.state.page}\r\n            siblingCount={3}\r\n            boundaryCount={2}\r\n            onChange={(event, page) => {\r\n              this.GetData(this.props.meta.match.params.id, page - 1, this.state.pageSize);\r\n              window.scrollTo(0, 0);\r\n              this.setState({ page: page });\r\n            }} />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default ActorSearth;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\Post.js",["247"],"const Post = ({ data }) => {\r\n    return (\r\n        <div className=\"post-slot\">\r\n            <h1>{data.title}</h1>\r\n            <div className=\"flex_block\">\r\n                <img src={data.poster_url} width=\"20%\" />\r\n                <div className=\"info_block\">\r\n                    <p><b>Год:</b> {data.year}</p>\r\n                    <div dangerouslySetInnerHTML={{ __html: data.description }} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\Header.js",["248","249","250","251","252","253","254","255","256","257","258","259"],"import styled from '@emotion/styled';\r\nimport { Adb } from '@mui/icons-material';\r\nimport { AppBar, Avatar, Box, Button, Container, Fade, IconButton, InputBase, Menu, MenuItem, Slide, TextField, Toolbar, Tooltip, Typography, alpha } from '@mui/material';\r\nimport React, { useRef, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Profile from '../Profile';\r\nimport { getCookie } from '../..';\r\n\r\nconst Header = (props) => {\r\n    const searchInput = useRef();\r\n\r\n    const serath = () => {\r\n        props.searth(0, props.pageSize, searchInput.current.value);\r\n    }\r\n\r\n    const Search = styled('div')(({ theme }) => ({\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n        },\r\n        marginRight: theme.spacing(2),\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(3),\r\n            width: 'auto',\r\n        },\r\n    }));\r\n\r\n    const SearchIconWrapper = styled(IconButton)(({ theme }) => ({\r\n        padding: theme.spacing(0, 2),\r\n        height: '40px',\r\n        width: '40px',\r\n        // position: 'absolute',\r\n        // display: 'flex',\r\n        // alignItems: 'center',\r\n        // justifyContent: 'center',\r\n    }));\r\n\r\n    const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n        color: 'inherit',\r\n        '& .MuiInputBase-input': {\r\n            padding: theme.spacing(1, 1, 1, 0),\r\n            // vertical padding + font size from searchIcon\r\n            paddingLeft: `calc(1em + ${theme.spacing(0)})`,\r\n            transition: theme.transitions.create('width'),\r\n            width: '100%',\r\n            [theme.breakpoints.up('md')]: {\r\n                width: '20ch',\r\n            },\r\n        },\r\n    }));\r\n\r\n    const pages = [{\r\n        href: \"/\",\r\n        title: 'Главная'\r\n    }, {\r\n        href: \"/top\",\r\n        title: 'Топ'\r\n    }, {\r\n        href: \"/films\",\r\n        title: \"Фильмы\"\r\n    }, {\r\n        href: \"/serials\",\r\n        title: \"Сериалы\"\r\n    },{\r\n        href: \"/doramy\",\r\n        title: \"Дорамы\"\r\n    }, {\r\n        href: \"/anime\",\r\n        title: \"Аниме\"\r\n    }];\r\n\r\n    const history = useHistory();\r\n    return (\r\n        <AppBar position=\"sticky\">\r\n            <Container maxWidth=\"xl\">\r\n                <Toolbar disableGutters>\r\n                    <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n                        {pages.map((page, key) => (\r\n                            <div key={key}>\r\n                                <Button\r\n                                    onClick={page?.click == null ? () => history.push(page.href) : page.click}\r\n                                    sx={{ my: 2, color: 'white', display: 'block' }}\r\n                                >\r\n                                    {page.title}\r\n                                </Button>\r\n                                {page.menu}\r\n                            </div>\r\n                        ))}\r\n                    </Box>\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <Search>\r\n                            <StyledInputBase\r\n                                inputRef={searchInput}\r\n                                placeholder=\"Поиск...\"\r\n                                inputProps={{ 'aria-label': 'search' }}\r\n                            />\r\n                        </Search>\r\n                        <SearchIconWrapper onClick={serath}>\r\n                            <SearchIcon />\r\n                        </SearchIconWrapper>\r\n                    </div>\r\n\r\n                    {getCookie('jwt') != \"\" &&\r\n                        <Profile />\r\n                    }\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    );\r\n}\r\nexport default Header;",["260","261"],"D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\HeaderMobile.js",["262","263","264","265"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport { Accordion, Card } from '@mui/material';\r\n\r\nclass HeaderMobile extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            show: false,\r\n        };\r\n    }\r\n\r\n    serath = (e) => {\r\n        this.props.searth(0, this.props.pageSize, e.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <Accordion defaultActiveKey=\"0\" className={\"nav_bar mobile-view\"}>\r\n                    <Card>\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"1\"><MenuIcon style={{ color: \"#FFD700\" }} /></Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <Card.Body>\r\n                                <a href=\"/\">Главная</a>\r\n                                <a onClick={() => { this.props.getsave(); this.setState({ show: true }); }}>Избранное</a>\r\n                                <a href=\"/top\">Рекомендации</a>\r\n                                <a href=\"/actors\">Актеры</a>\r\n                                <a href=\"/films\">Фильмы</a>\r\n                                <a href=\"/serials\">Сериалы</a>\r\n                                <a href=\"/doramy\">Дорамы</a>\r\n                                <a href=\"/anime\">Аниме</a>\r\n\r\n                                <Formik\r\n                                    onSubmit={this.serath}\r\n                                    initialValues={{\r\n                                        value: '',\r\n                                    }}\r\n                                >\r\n                                    {({\r\n                                        handleSubmit,\r\n                                        handleChange,\r\n                                        handleBlur,\r\n                                        values,\r\n                                        touched,\r\n                                        isValid,\r\n                                        errors,\r\n                                    }) => (\r\n                                        <Form onSubmit={handleSubmit}>\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                name=\"value\"\r\n                                                value={values.value}\r\n                                                onChange={handleChange}\r\n                                                placeholder=\"Введите название...\"\r\n                                                className=\"mr-sm-2\" />\r\n                                            <Button type=\"submit\" style={{ width: \"100%\" }}>Поиск</Button>\r\n                                        </Form>\r\n                                    )}\r\n                                </Formik>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n                <Modal\r\n                    show={this.state.show}\r\n                    onHide={() => this.setState({ show: false })}\r\n                    dialogClassName=\"modal-90w\"\r\n                    aria-labelledby=\"example-custom-modal-styling-title\"\r\n                >\r\n                    <Modal.Header closeButton style={{ backgroundColor: \"#171a1f\", color: \"#FFD700\" }}>\r\n                        <Modal.Title id=\"example-custom-modal-styling-title\">Избранное</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{ backgroundColor: \"#171a1f\", color: \"#FFD700\" }}>\r\n                        {this.props.BookMarks.map((mark, key) =>\r\n                            <div className=\"book-mark\" key={\"index=\" + key}>\r\n                                <a href={\"/video_player/\" + mark[2]} className=\"mark-slot\">\r\n                                    <h1>{mark[1]}</h1>\r\n                                    <img src={mark[3]} height=\"70px\" />\r\n                                    {mark[4] != 0 && <h2>Отсановились на {mark[4]} серии</h2>}\r\n                                    <Button\r\n                                        variant=\"danger\"\r\n                                        style={{\r\n                                            position: \"absolute\",\r\n                                            bottom: \"0px\",\r\n                                            right: \"0px\",\r\n                                            padding: \"0 3px\"\r\n                                        }}\r\n                                        onClick={() => {\r\n                                            this.props.RemoveSaveBookMark(mark[0]);\r\n                                            this.props.message(\"Успешное удаление: '\" + mark[1] + \"'\");\r\n                                        }}>Удалить</Button>\r\n                                </a>\r\n                            </div>\r\n                        )}\r\n                    </Modal.Body>\r\n                </Modal> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default HeaderMobile;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\Film.js",["266","267"],"import { Favorite, FavoriteBorder, Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport { Button, ButtonGroup, Tooltip } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Film = ({ data, SetSave, addWatched, message }) => {\r\n    const [viewed, setViewed] = useState(false);\r\n    const [favorite, setFavorite] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setViewed(data.id_viewed == null ? false : true);\r\n        setFavorite(data.id_favorite == null ? false : true);\r\n\r\n        console.log(data)\r\n    }, [])\r\n    return (\r\n        <div className=\"post-slot\">\r\n            <div className=\"action_panel\">\r\n                <div style={{ flex: 1 }}>\r\n                    <NavLink className=\"post-slot-button\" to={\"/video_player/\" + data.id_video}><p>{data.title} ({data.year})</p></NavLink>\r\n                    <NavLink className=\"post-slot-button original-title\" to={\"/video_player/\" + data.id_video}><p>{data.title_en}</p></NavLink>\r\n                </div>\r\n                <ButtonGroup variant=\"outlined\" style={{ margin: 5 }}>\r\n                    <Tooltip title={favorite ? \"В избранных\" : \"Добавить в избранное\"}>\r\n                        <Button color=\"secondary\" onClick={() => {\r\n                            if (localStorage.getItem(\"name\")) {\r\n                                SetSave(data.id_video, setFavorite);\r\n                            } else { message('Эта функция доступна только авторизованным лицам!'); }\r\n                        }}>\r\n                            {favorite ? <Favorite /> : <FavoriteBorder />}\r\n                        </Button>\r\n                    </Tooltip>\r\n                    <Tooltip title={viewed ? \"В просмотренные\" : \"Добавить в просмотренные\"}>\r\n                        <Button color={!viewed ? \"info\" : \"success\"} onClick={() => {\r\n                            if (localStorage.getItem(\"name\")) {\r\n                                addWatched(data.id_video, setViewed);\r\n                                message(!viewed ? 'Вы пометили видео запись просмотренной.' : 'Вы пометили видео запись не просмотренной.');\r\n                            } else { message('Эта функция доступна только авторизованным лицам!'); }\r\n                        }}>\r\n                            {viewed ? <Visibility /> : <VisibilityOff />}\r\n                        </Button>\r\n                    </Tooltip>\r\n                </ButtonGroup>\r\n            </div>\r\n            <div className=\"flex_block\">\r\n                <img src={data.poster_url} />\r\n                {data.year != null ?\r\n                    <div className=\"info_panel\">\r\n                        <p>Год: {data.year}</p>\r\n                        <p>Страна: {data.countries}</p>\r\n                        <p>Жанры: {data.genres}</p>\r\n                        <p>Продолжительность: {data.duration} мин.</p>\r\n                        <br />\r\n                        <p>{data.discription != null && data.discription}</p>\r\n                        {data.kinopoisk_rating > 0 && <p className=\"kino_poisk\">КиноПоиск: {data.kinopoisk_rating}</p>}\r\n                        {data.imdb_rating > 0 && <p className=\"imdb\">Imdb: {data.imdb_rating}</p>}\r\n                        <p className=\"quality\">{data.quality}</p>\r\n                    </div>\r\n                    :\r\n                    <p style={{ color: \"white\" }}>Нет информации!</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Film;","D:\\LanguageProjects\\darkraven_2.0\\src\\Router.js",["268","269","270","271","272","273","274","275","276","277","278"],"import React from 'react';\r\nimport './styles/App.scss';\r\nimport Posts from './components/Posts'\r\nimport Left_Bar from './components/Left_Bar';\r\nimport Films from './components/Films';\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport VideoPlayer from './components/VideoPlayer';\r\nimport Top from './components/Top';\r\nimport Searth from './components/Searth'\r\nimport Head from './components/Head';\r\nimport BD from './components/BD';\r\nimport Actors from \"./components/Actors\";\r\nimport EditPage from './components/Template/EditPage';\r\nimport EditActors from './components/Template/EditActors';\r\nimport ActorSearth from './components/Template/ActorSearth';\r\nimport Watched from './components/Watched';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Alert, Snackbar } from '@mui/material';\r\nimport { getCookie, logout, setCookie } from '.';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loading from './components/Template/Loading';\r\nimport Favorites from './components/Favorites';\r\n\r\nconst Routers = () => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [posts, setPosts] = useState(null);\r\n  const [recommend, setRecommend] = useState([]);\r\n  const [videoValuePage, setVideoValuePage] = useState(0);\r\n  const [pageSize, setPageSize] = useState(15);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [type, setType] = useState(0);\r\n\r\n  const history = useHistory();\r\n\r\n  const onMessage = (mess) => {\r\n    setShow(true);\r\n    setMessage(mess);\r\n  }\r\n\r\n  const GetRecomendData = () => {\r\n    setLoading(true);\r\n    fetch('http://site.alwaysdata.net/api/get_recomend_content.php', {\r\n      method: 'POST',\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        setRecommend(respons);\r\n        setLoading(false);\r\n      })\r\n  }\r\n\r\n  const SetSave = (idPost, setFavorite) => {\r\n    fetch('http://site.alwaysdata.net/api/switch_favorite.php', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        'jwt': getCookie('jwt'),\r\n        'id_post': idPost,\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        setShow(true);\r\n        if (respons.status == 200) {\r\n          setMessage(\"Добавлено в Избранное\");\r\n          setFavorite(true);\r\n        }\r\n        else if (respons.status == 201) {\r\n          setMessage(\"Удалено из Избранных\");\r\n          setFavorite(false);\r\n        }\r\n      })\r\n  }\r\n\r\n  const addWatched = (idPost, setState) => {\r\n    fetch('http://site.alwaysdata.net/api/switch_view.php', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        'jwt': getCookie('jwt'),\r\n        'id_post': idPost,\r\n      }),\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        if (respons.status == 200 || respons.status == 201)\r\n          setState(respons.status == 200 ? true : false);\r\n      });\r\n  }\r\n\r\n  const RenderPost = (type, Page, pageSize) => {\r\n    setLoading(true);\r\n    var form = new FormData();\r\n    form.append('type', type);\r\n    form.append('page', Page);\r\n    setPageSize(pageSize);\r\n    form.append('pageSize', pageSize);\r\n\r\n    fetch(\"http://site.alwaysdata.net/api/get_content.php\", {\r\n      method: 'POST',\r\n      body: form,\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        setPosts(respons);\r\n        setLoading(false);\r\n      })\r\n\r\n    setType(type);\r\n  }\r\n\r\n  const Search = (Page, pageSize, result) => {\r\n    setLoading(true);\r\n    setPageSize(pageSize);\r\n    setSearch(result);\r\n    var form = new FormData();\r\n    form.append('page', Page);\r\n    form.append('pageSize', pageSize);\r\n    form.append('value', result);\r\n\r\n    fetch(\"http://site.alwaysdata.net/api/searth.php\", {\r\n      method: 'POST',\r\n      body: form,\r\n    }).then(res => res.json())\r\n      .then(respons => {\r\n        setPosts(respons);\r\n        setLoading(false);\r\n      })\r\n  }\r\n\r\n  const onUpdateToken = () => {\r\n    let jwt = getCookie(\"jwt\");\r\n    fetch('http://site.alwaysdata.net/api/update_token.php', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        'jwt': jwt,\r\n      }),\r\n    }).then(e => e.json()).then(v => {\r\n      if (v.message == \"Access granted.\") {\r\n        setCookie(\"jwt\", v.token, 1);\r\n        onMessage('Вход возобновлен!');\r\n      } else {\r\n        logout();\r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (search != '') history.push(\"/searth\");\r\n  }, [search])\r\n\r\n  useEffect(() => {\r\n    GetRecomendData();\r\n    onUpdateToken();\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className={\"main-conteiner\"}>\r\n      <Loading open={loading} />\r\n\r\n      <Head onMessage={onMessage} Search={Search} Type={type} pageSize={pageSize} />\r\n      <div className=\"option\"></div>\r\n      <Left_Bar data={recommend} />\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <Posts />} />\r\n        <Route exact path=\"/top\" render={() => <Top />} />\r\n        <Route exact path=\"/films\" render={() => <Films Value={videoValuePage} pageSize={pageSize} Func={RenderPost} SetSave={SetSave} ContentVideo={posts} type=\"3\" RenP={RenderPost} message={onMessage} addWatched={addWatched} />} />\r\n        <Route exact path=\"/serials\" render={() => <Films Value={videoValuePage} pageSize={pageSize} Func={RenderPost} SetSave={SetSave} ContentVideo={posts} type=\"4\" RenP={RenderPost} message={onMessage} addWatched={addWatched} />} />\r\n        <Route exact path=\"/doramy\" render={() => <Films Value={videoValuePage} pageSize={pageSize} Func={RenderPost} SetSave={SetSave} ContentVideo={posts} type=\"5\" RenP={RenderPost} message={onMessage} addWatched={addWatched} />} />\r\n        <Route exact path=\"/anime\" render={() => <Films Value={videoValuePage} pageSize={pageSize} Func={RenderPost} SetSave={SetSave} ContentVideo={posts} type=\"6\" RenP={RenderPost} message={onMessage} addWatched={addWatched} />} />\r\n        <Route path=\"/video_player/:id\" render={(e) => <VideoPlayer meta={e} message={onMessage} SetSave={SetSave} addWatched={addWatched} />} />\r\n        <Route path=\"/searth\" render={() => <Searth message={onMessage} SearchFunc={Search} search={search} Value={videoValuePage} SetSave={SetSave} ContentVideo={posts} type=\"7\" />} />\r\n        <Route exact path=\"/edit-database\" render={() => <BD message={onMessage} />} />\r\n        <Route exact path=\"/edit-actors\" render={() => <Actors message={onMessage} />} />\r\n        <Route path=\"/edaeditor/:id\" render={(e) => <EditPage meta={e} message={onMessage} />} />\r\n        <Route path=\"/edaactor/:id\" render={(e) => <EditActors meta={e} message={onMessage} />} />\r\n        <Route path=\"/favorites\" render={() => <Favorites SetSave={SetSave} message={onMessage} addWatched={addWatched} />} />\r\n        <Route path=\"/actor/:id\" render={(e) => <ActorSearth meta={e} />} />\r\n        <Route path=\"/watched\" render={() => <Watched SetSave={SetSave} message={onMessage} addWatched={addWatched} />} />\r\n        <Route render={() => <h1 style={{ textAlign: \"center\", color: \"#fff\" }}>Такой страницы нема)</h1>} />\r\n      </Switch>\r\n\r\n      <Snackbar\r\n        open={show}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n        autoHideDuration={6000}\r\n        onClose={() => setShow(false)}\r\n      >\r\n        <Alert onClose={() => setShow(false)} severity=\"info\" sx={{ width: '100%' }}>\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Routers;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\Loading.js",[],"D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Favorites.js",["279","280","281","282","283","284","285","286"],"import React, { useEffect, useState } from 'react';\r\nimport { VisibilityOff } from '@mui/icons-material';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport Pagination from '@mui/material/Pagination';\r\nimport { Button, CircularProgress } from '@mui/material';\r\nimport { getCookie } from '..';\r\nimport Film from './Template/Film';\r\n\r\nconst Favorites = (props) => {\r\n    const [data, setData] = useState(null);\r\n    const [pageSize, setPageSize] = useState(5);\r\n    const [page, setPage] = useState(1);\r\n\r\n    function RenderDB(page, pageSize) {\r\n        fetch(\"http://site.alwaysdata.net/api/get_favorites.php\", {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                \"jwt\": getCookie(\"jwt\"),\r\n                \"page\": page,\r\n                \"pageSize\": pageSize\r\n            }),\r\n        }).then(response => response.json())\r\n            .then(respons => {\r\n                if (respons.status == 200)\r\n                    setData(respons)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        RenderDB(0, pageSize);\r\n        window.scrollTo(0, 0);\r\n    }, [])\r\n\r\n    if (!data) { return <CircularProgress /> }\r\n\r\n    return (\r\n        <div className=\"central\">\r\n            {data.posts.map((post, key) =>\r\n                <Film key={key} data={post} {...props} isWatched />\r\n            )}\r\n\r\n            <Pagination\r\n                className=\"pagination\"\r\n                count={Math.ceil(data.count / pageSize)}\r\n                page={page}\r\n                siblingCount={3}\r\n                boundaryCount={2}\r\n                onChange={(event, page) => {\r\n                    RenderDB(page - 1, pageSize);\r\n                    window.scrollTo(0, 0);\r\n                    setPage(page);\r\n                }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Favorites;","D:\\LanguageProjects\\darkraven_2.0\\src\\components\\Template\\ActorSlot.js",["287","288"],"import { Edit } from \"@mui/icons-material\";\r\nimport { Button, Link } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ActorSlot = ({ data }) => {\r\n    const history = useHistory();\r\n    \r\n    return (\r\n        <div className=\"actor-slot\">\r\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                <a className=\"actoractor-slot-button\">{data.name}</a>\r\n\r\n                <Button className=\"ForeverVideo\" onClick={() => history.push(\"/edaactor/\" + data.id_actor)}>\r\n                    <Link to={\"/edaactor/\" + data.id}>\r\n                        <Edit style={{ color: \"white\" }} />\r\n                    </Link>\r\n                </Button>\r\n            </div>\r\n            <img src={data.image} />\r\n            <div className=\"info_panel\">\r\n                <p>Дата рождения: {data.date_of_birth}</p>\r\n                <p>Рост: {data.growth} м</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ActorSlot;",{"ruleId":"289","severity":1,"message":"290","line":28,"column":24,"nodeType":"291","messageId":"292","endLine":28,"endColumn":26},{"ruleId":"289","severity":1,"message":"290","line":31,"column":25,"nodeType":"291","messageId":"292","endLine":31,"endColumn":27},{"ruleId":"293","replacedBy":"294"},{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","severity":1,"message":"298","line":7,"column":22,"nodeType":"299","messageId":"300","endLine":7,"endColumn":33},{"ruleId":"297","severity":1,"message":"301","line":11,"column":11,"nodeType":"299","messageId":"300","endLine":11,"endColumn":27},{"ruleId":"302","severity":1,"message":"303","line":17,"column":8,"nodeType":"304","endLine":17,"endColumn":20,"suggestions":"305"},{"ruleId":"302","severity":1,"message":"306","line":21,"column":8,"nodeType":"304","endLine":21,"endColumn":18,"suggestions":"307"},{"ruleId":"297","severity":1,"message":"308","line":5,"column":8,"nodeType":"299","messageId":"300","endLine":5,"endColumn":15},{"ruleId":"297","severity":1,"message":"309","line":8,"column":10,"nodeType":"299","messageId":"300","endLine":8,"endColumn":14},{"ruleId":"297","severity":1,"message":"310","line":8,"column":16,"nodeType":"299","messageId":"300","endLine":8,"endColumn":21},{"ruleId":"297","severity":1,"message":"311","line":12,"column":23,"nodeType":"299","messageId":"300","endLine":12,"endColumn":35},{"ruleId":"289","severity":1,"message":"290","line":59,"column":35,"nodeType":"291","messageId":"292","endLine":59,"endColumn":37},{"ruleId":"312","severity":1,"message":"313","line":78,"column":45,"nodeType":"314","endLine":78,"endColumn":102},{"ruleId":"315","severity":1,"message":"316","line":6,"column":5,"nodeType":"317","messageId":"318","endLine":8,"endColumn":6},{"ruleId":"312","severity":1,"message":"313","line":19,"column":37,"nodeType":"314","endLine":19,"endColumn":121},{"ruleId":"297","severity":1,"message":"319","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":18},{"ruleId":"297","severity":1,"message":"320","line":2,"column":20,"nodeType":"299","messageId":"300","endLine":2,"endColumn":24},{"ruleId":"297","severity":1,"message":"321","line":2,"column":26,"nodeType":"299","messageId":"300","endLine":2,"endColumn":40},{"ruleId":"297","severity":1,"message":"322","line":2,"column":42,"nodeType":"299","messageId":"300","endLine":2,"endColumn":52},{"ruleId":"297","severity":1,"message":"323","line":2,"column":54,"nodeType":"299","messageId":"300","endLine":2,"endColumn":67},{"ruleId":"297","severity":1,"message":"324","line":5,"column":57,"nodeType":"299","messageId":"300","endLine":5,"endColumn":63},{"ruleId":"297","severity":1,"message":"325","line":5,"column":65,"nodeType":"299","messageId":"300","endLine":5,"endColumn":76},{"ruleId":"297","severity":1,"message":"326","line":5,"column":78,"nodeType":"299","messageId":"300","endLine":5,"endColumn":82},{"ruleId":"297","severity":1,"message":"327","line":5,"column":84,"nodeType":"299","messageId":"300","endLine":5,"endColumn":91},{"ruleId":"297","severity":1,"message":"328","line":9,"column":10,"nodeType":"299","messageId":"300","endLine":9,"endColumn":19},{"ruleId":"297","severity":1,"message":"329","line":14,"column":10,"nodeType":"299","messageId":"300","endLine":14,"endColumn":15},{"ruleId":"297","severity":1,"message":"330","line":14,"column":17,"nodeType":"299","messageId":"300","endLine":14,"endColumn":25},{"ruleId":"297","severity":1,"message":"331","line":15,"column":10,"nodeType":"299","messageId":"300","endLine":15,"endColumn":14},{"ruleId":"297","severity":1,"message":"332","line":15,"column":16,"nodeType":"299","messageId":"300","endLine":15,"endColumn":23},{"ruleId":"297","severity":1,"message":"333","line":16,"column":18,"nodeType":"299","messageId":"300","endLine":16,"endColumn":27},{"ruleId":"297","severity":1,"message":"334","line":22,"column":10,"nodeType":"299","messageId":"300","endLine":22,"endColumn":24},{"ruleId":"297","severity":1,"message":"335","line":22,"column":26,"nodeType":"299","messageId":"300","endLine":22,"endColumn":43},{"ruleId":"297","severity":1,"message":"336","line":23,"column":20,"nodeType":"299","messageId":"300","endLine":23,"endColumn":31},{"ruleId":"297","severity":1,"message":"337","line":24,"column":10,"nodeType":"299","messageId":"300","endLine":24,"endColumn":16},{"ruleId":"297","severity":1,"message":"338","line":24,"column":18,"nodeType":"299","messageId":"300","endLine":24,"endColumn":27},{"ruleId":"312","severity":1,"message":"313","line":44,"column":17,"nodeType":"314","endLine":44,"endColumn":42},{"ruleId":"312","severity":1,"message":"313","line":51,"column":17,"nodeType":"314","endLine":51,"endColumn":92},{"ruleId":"297","severity":1,"message":"339","line":73,"column":12,"nodeType":"299","messageId":"300","endLine":73,"endColumn":21},{"ruleId":"297","severity":1,"message":"340","line":127,"column":12,"nodeType":"299","messageId":"300","endLine":127,"endColumn":21},{"ruleId":"289","severity":1,"message":"290","line":139,"column":32,"nodeType":"291","messageId":"292","endLine":139,"endColumn":34},{"ruleId":"289","severity":1,"message":"290","line":140,"column":36,"nodeType":"291","messageId":"292","endLine":140,"endColumn":38},{"ruleId":"289","severity":1,"message":"290","line":148,"column":30,"nodeType":"291","messageId":"292","endLine":148,"endColumn":32},{"ruleId":"297","severity":1,"message":"341","line":155,"column":12,"nodeType":"299","messageId":"300","endLine":155,"endColumn":23},{"ruleId":"302","severity":1,"message":"342","line":187,"column":6,"nodeType":"304","endLine":187,"endColumn":17,"suggestions":"343"},{"ruleId":"344","severity":1,"message":"345","line":226,"column":7,"nodeType":"314","endLine":226,"endColumn":124},{"ruleId":"289","severity":1,"message":"290","line":241,"column":115,"nodeType":"291","messageId":"292","endLine":241,"endColumn":117},{"ruleId":"289","severity":1,"message":"290","line":265,"column":69,"nodeType":"291","messageId":"292","endLine":265,"endColumn":71},{"ruleId":"312","severity":1,"message":"313","line":266,"column":15,"nodeType":"314","endLine":266,"endColumn":40},{"ruleId":"297","severity":1,"message":"346","line":2,"column":17,"nodeType":"299","messageId":"300","endLine":2,"endColumn":25},{"ruleId":"297","severity":1,"message":"347","line":4,"column":22,"nodeType":"299","messageId":"300","endLine":4,"endColumn":28},{"ruleId":"297","severity":1,"message":"348","line":6,"column":5,"nodeType":"299","messageId":"300","endLine":6,"endColumn":13},{"ruleId":"349","severity":1,"message":"350","line":26,"column":44,"nodeType":"351","messageId":"352","endLine":26,"endColumn":46},{"ruleId":"312","severity":1,"message":"313","line":31,"column":37,"nodeType":"314","endLine":31,"endColumn":97},{"ruleId":"312","severity":1,"message":"313","line":32,"column":37,"nodeType":"314","endLine":32,"endColumn":113},{"ruleId":"297","severity":1,"message":"346","line":1,"column":17,"nodeType":"299","messageId":"300","endLine":1,"endColumn":25},{"ruleId":"349","severity":1,"message":"353","line":69,"column":57,"nodeType":"351","messageId":"354","endLine":69,"endColumn":59},{"ruleId":"355","severity":1,"message":"356","line":81,"column":37,"nodeType":"314","endLine":81,"endColumn":69},{"ruleId":"312","severity":1,"message":"313","line":82,"column":37,"nodeType":"314","endLine":82,"endColumn":77},{"ruleId":"297","severity":1,"message":"347","line":3,"column":22,"nodeType":"299","messageId":"300","endLine":3,"endColumn":28},{"ruleId":"297","severity":1,"message":"357","line":4,"column":5,"nodeType":"299","messageId":"300","endLine":4,"endColumn":9},{"ruleId":"297","severity":1,"message":"358","line":6,"column":8,"nodeType":"299","messageId":"300","endLine":6,"endColumn":16},{"ruleId":"297","severity":1,"message":"359","line":7,"column":8,"nodeType":"299","messageId":"300","endLine":7,"endColumn":18},{"ruleId":"297","severity":1,"message":"298","line":17,"column":22,"nodeType":"299","messageId":"300","endLine":17,"endColumn":33},{"ruleId":"302","severity":1,"message":"360","line":39,"column":8,"nodeType":"304","endLine":39,"endColumn":10,"suggestions":"361"},{"ruleId":"297","severity":1,"message":"362","line":2,"column":8,"nodeType":"299","messageId":"300","endLine":2,"endColumn":20},{"ruleId":"297","severity":1,"message":"324","line":4,"column":10,"nodeType":"299","messageId":"300","endLine":4,"endColumn":16},{"ruleId":"297","severity":1,"message":"363","line":11,"column":14,"nodeType":"299","messageId":"300","endLine":11,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":31,"column":26,"nodeType":"291","messageId":"292","endLine":31,"endColumn":28},{"ruleId":"297","severity":1,"message":"323","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":23},{"ruleId":"297","severity":1,"message":"347","line":4,"column":22,"nodeType":"299","messageId":"300","endLine":4,"endColumn":28},{"ruleId":"297","severity":1,"message":"357","line":5,"column":5,"nodeType":"299","messageId":"300","endLine":5,"endColumn":9},{"ruleId":"297","severity":1,"message":"348","line":6,"column":5,"nodeType":"299","messageId":"300","endLine":6,"endColumn":13},{"ruleId":"297","severity":1,"message":"324","line":9,"column":10,"nodeType":"299","messageId":"300","endLine":9,"endColumn":16},{"ruleId":"297","severity":1,"message":"298","line":15,"column":22,"nodeType":"299","messageId":"300","endLine":15,"endColumn":33},{"ruleId":"302","severity":1,"message":"360","line":35,"column":8,"nodeType":"304","endLine":35,"endColumn":10,"suggestions":"364"},{"ruleId":"297","severity":1,"message":"365","line":3,"column":26,"nodeType":"299","messageId":"300","endLine":3,"endColumn":39},{"ruleId":"297","severity":1,"message":"357","line":3,"column":88,"nodeType":"299","messageId":"300","endLine":3,"endColumn":92},{"ruleId":"297","severity":1,"message":"366","line":3,"column":94,"nodeType":"299","messageId":"300","endLine":3,"endColumn":99},{"ruleId":"297","severity":1,"message":"367","line":7,"column":10,"nodeType":"299","messageId":"300","endLine":7,"endColumn":17},{"ruleId":"297","severity":1,"message":"368","line":7,"column":19,"nodeType":"299","messageId":"300","endLine":7,"endColumn":29},{"ruleId":"289","severity":1,"message":"290","line":33,"column":27,"nodeType":"291","messageId":"292","endLine":33,"endColumn":29},{"ruleId":"289","severity":1,"message":"290","line":62,"column":21,"nodeType":"291","messageId":"292","endLine":62,"endColumn":23},{"ruleId":"355","severity":1,"message":"356","line":110,"column":119,"nodeType":"314","endLine":110,"endColumn":179},{"ruleId":"355","severity":1,"message":"356","line":156,"column":100,"nodeType":"314","endLine":156,"endColumn":157},{"ruleId":"297","severity":1,"message":"346","line":3,"column":17,"nodeType":"299","messageId":"300","endLine":3,"endColumn":25},{"ruleId":"297","severity":1,"message":"328","line":4,"column":10,"nodeType":"299","messageId":"300","endLine":4,"endColumn":19},{"ruleId":"297","severity":1,"message":"369","line":4,"column":29,"nodeType":"299","messageId":"300","endLine":4,"endColumn":38},{"ruleId":"289","severity":1,"message":"290","line":68,"column":42,"nodeType":"291","messageId":"292","endLine":68,"endColumn":44},{"ruleId":"289","severity":1,"message":"290","line":76,"column":42,"nodeType":"291","messageId":"292","endLine":76,"endColumn":44},{"ruleId":"297","severity":1,"message":"347","line":6,"column":20,"nodeType":"299","messageId":"300","endLine":6,"endColumn":26},{"ruleId":"297","severity":1,"message":"357","line":7,"column":3,"nodeType":"299","messageId":"300","endLine":7,"endColumn":7},{"ruleId":"312","severity":1,"message":"313","line":135,"column":9,"nodeType":"314","endLine":135,"endColumn":137},{"ruleId":"289","severity":1,"message":"370","line":136,"column":104,"nodeType":"291","messageId":"292","endLine":136,"endColumn":106},{"ruleId":"289","severity":1,"message":"370","line":139,"column":84,"nodeType":"291","messageId":"292","endLine":139,"endColumn":86},{"ruleId":"289","severity":1,"message":"370","line":161,"column":80,"nodeType":"291","messageId":"292","endLine":161,"endColumn":82},{"ruleId":"289","severity":1,"message":"370","line":185,"column":90,"nodeType":"291","messageId":"292","endLine":185,"endColumn":92},{"ruleId":"344","severity":1,"message":"345","line":191,"column":9,"nodeType":"314","endLine":191,"endColumn":149},{"ruleId":"289","severity":1,"message":"370","line":213,"column":83,"nodeType":"291","messageId":"292","endLine":213,"endColumn":85},{"ruleId":"289","severity":1,"message":"370","line":214,"column":89,"nodeType":"291","messageId":"292","endLine":214,"endColumn":91},{"ruleId":"289","severity":1,"message":"370","line":215,"column":90,"nodeType":"291","messageId":"292","endLine":215,"endColumn":92},{"ruleId":"289","severity":1,"message":"370","line":216,"column":88,"nodeType":"291","messageId":"292","endLine":216,"endColumn":90},{"ruleId":"289","severity":1,"message":"370","line":217,"column":91,"nodeType":"291","messageId":"292","endLine":217,"endColumn":93},{"ruleId":"289","severity":1,"message":"370","line":218,"column":87,"nodeType":"291","messageId":"292","endLine":218,"endColumn":89},{"ruleId":"289","severity":1,"message":"370","line":219,"column":89,"nodeType":"291","messageId":"292","endLine":219,"endColumn":91},{"ruleId":"289","severity":1,"message":"370","line":220,"column":89,"nodeType":"291","messageId":"292","endLine":220,"endColumn":91},{"ruleId":"297","severity":1,"message":"371","line":4,"column":8,"nodeType":"299","messageId":"300","endLine":4,"endColumn":17},{"ruleId":"297","severity":1,"message":"347","line":6,"column":20,"nodeType":"299","messageId":"300","endLine":6,"endColumn":26},{"ruleId":"297","severity":1,"message":"357","line":7,"column":3,"nodeType":"299","messageId":"300","endLine":7,"endColumn":7},{"ruleId":"297","severity":1,"message":"348","line":8,"column":3,"nodeType":"299","messageId":"300","endLine":8,"endColumn":11},{"ruleId":"289","severity":1,"message":"290","line":26,"column":28,"nodeType":"291","messageId":"292","endLine":26,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":36,"column":44,"nodeType":"291","messageId":"292","endLine":36,"endColumn":46},{"ruleId":"289","severity":1,"message":"290","line":46,"column":28,"nodeType":"291","messageId":"292","endLine":46,"endColumn":30},{"ruleId":"289","severity":1,"message":"370","line":62,"column":36,"nodeType":"291","messageId":"292","endLine":62,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":84,"column":7,"nodeType":"314","endLine":84,"endColumn":101},{"ruleId":"297","severity":1,"message":"347","line":4,"column":20,"nodeType":"299","messageId":"300","endLine":4,"endColumn":26},{"ruleId":"297","severity":1,"message":"357","line":5,"column":3,"nodeType":"299","messageId":"300","endLine":5,"endColumn":7},{"ruleId":"312","severity":1,"message":"313","line":69,"column":9,"nodeType":"314","endLine":69,"endColumn":103},{"ruleId":"349","severity":1,"message":"353","line":77,"column":33,"nodeType":"351","messageId":"354","endLine":77,"endColumn":35},{"ruleId":"312","severity":1,"message":"313","line":91,"column":19,"nodeType":"314","endLine":91,"endColumn":59},{"ruleId":"312","severity":1,"message":"313","line":6,"column":17,"nodeType":"314","endLine":6,"endColumn":58},{"ruleId":"297","severity":1,"message":"372","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":13},{"ruleId":"297","severity":1,"message":"373","line":3,"column":18,"nodeType":"299","messageId":"300","endLine":3,"endColumn":24},{"ruleId":"297","severity":1,"message":"309","line":3,"column":50,"nodeType":"299","messageId":"300","endLine":3,"endColumn":54},{"ruleId":"297","severity":1,"message":"374","line":3,"column":79,"nodeType":"299","messageId":"300","endLine":3,"endColumn":83},{"ruleId":"297","severity":1,"message":"375","line":3,"column":85,"nodeType":"299","messageId":"300","endLine":3,"endColumn":93},{"ruleId":"297","severity":1,"message":"310","line":3,"column":95,"nodeType":"299","messageId":"300","endLine":3,"endColumn":100},{"ruleId":"297","severity":1,"message":"376","line":3,"column":102,"nodeType":"299","messageId":"300","endLine":3,"endColumn":111},{"ruleId":"297","severity":1,"message":"377","line":3,"column":122,"nodeType":"299","messageId":"300","endLine":3,"endColumn":129},{"ruleId":"297","severity":1,"message":"378","line":3,"column":131,"nodeType":"299","messageId":"300","endLine":3,"endColumn":141},{"ruleId":"297","severity":1,"message":"346","line":4,"column":25,"nodeType":"299","messageId":"300","endLine":4,"endColumn":33},{"ruleId":"297","severity":1,"message":"357","line":5,"column":10,"nodeType":"299","messageId":"300","endLine":5,"endColumn":14},{"ruleId":"289","severity":1,"message":"370","line":109,"column":39,"nodeType":"291","messageId":"292","endLine":109,"endColumn":41},{"ruleId":"293","replacedBy":"379"},{"ruleId":"295","replacedBy":"380"},{"ruleId":"297","severity":1,"message":"357","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"381","line":3,"column":8,"nodeType":"299","messageId":"300","endLine":3,"endColumn":16},{"ruleId":"297","severity":1,"message":"382","line":4,"column":10,"nodeType":"299","messageId":"300","endLine":4,"endColumn":19},{"ruleId":"297","severity":1,"message":"326","line":4,"column":21,"nodeType":"299","messageId":"300","endLine":4,"endColumn":25},{"ruleId":"302","severity":1,"message":"383","line":15,"column":8,"nodeType":"304","endLine":15,"endColumn":10,"suggestions":"384"},{"ruleId":"312","severity":1,"message":"313","line":46,"column":17,"nodeType":"314","endLine":46,"endColumn":46},{"ruleId":"297","severity":1,"message":"385","line":32,"column":26,"nodeType":"299","messageId":"300","endLine":32,"endColumn":43},{"ruleId":"289","severity":1,"message":"290","line":65,"column":28,"nodeType":"291","messageId":"292","endLine":65,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":69,"column":33,"nodeType":"291","messageId":"292","endLine":69,"endColumn":35},{"ruleId":"289","severity":1,"message":"290","line":85,"column":28,"nodeType":"291","messageId":"292","endLine":85,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":85,"column":53,"nodeType":"291","messageId":"292","endLine":85,"endColumn":55},{"ruleId":"289","severity":1,"message":"290","line":86,"column":35,"nodeType":"291","messageId":"292","endLine":86,"endColumn":37},{"ruleId":"289","severity":1,"message":"290","line":137,"column":21,"nodeType":"291","messageId":"292","endLine":137,"endColumn":23},{"ruleId":"289","severity":1,"message":"370","line":147,"column":16,"nodeType":"291","messageId":"292","endLine":147,"endColumn":18},{"ruleId":"302","severity":1,"message":"386","line":148,"column":6,"nodeType":"304","endLine":148,"endColumn":14,"suggestions":"387"},{"ruleId":"302","severity":1,"message":"388","line":153,"column":6,"nodeType":"304","endLine":153,"endColumn":8,"suggestions":"389"},{"ruleId":"390","severity":1,"message":"391","line":162,"column":7,"nodeType":"314","endLine":162,"endColumn":36},{"ruleId":"297","severity":1,"message":"323","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":23},{"ruleId":"297","severity":1,"message":"347","line":4,"column":22,"nodeType":"299","messageId":"300","endLine":4,"endColumn":28},{"ruleId":"297","severity":1,"message":"357","line":5,"column":5,"nodeType":"299","messageId":"300","endLine":5,"endColumn":9},{"ruleId":"297","severity":1,"message":"348","line":6,"column":5,"nodeType":"299","messageId":"300","endLine":6,"endColumn":13},{"ruleId":"297","severity":1,"message":"324","line":9,"column":10,"nodeType":"299","messageId":"300","endLine":9,"endColumn":16},{"ruleId":"297","severity":1,"message":"298","line":15,"column":22,"nodeType":"299","messageId":"300","endLine":15,"endColumn":33},{"ruleId":"289","severity":1,"message":"290","line":28,"column":36,"nodeType":"291","messageId":"292","endLine":28,"endColumn":38},{"ruleId":"302","severity":1,"message":"360","line":36,"column":8,"nodeType":"304","endLine":36,"endColumn":10,"suggestions":"392"},{"ruleId":"355","severity":1,"message":"356","line":11,"column":17,"nodeType":"314","endLine":11,"endColumn":55},{"ruleId":"312","severity":1,"message":"313","line":19,"column":13,"nodeType":"314","endLine":19,"endColumn":37},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["393"],"no-negated-in-lhs",["394"],"no-unused-vars","'setPageSize' is assigned a value but never used.","Identifier","unusedVar","'onShowSizeChange' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["395"],"React Hook useEffect has a missing dependency: 'props.pageSize'. Either include it or remove the dependency array. If 'setPageSize' needs the current value of 'props.pageSize', you can also switch to useReducer instead of useState and read 'props.pageSize' in the reducer.",["396"],"'Profile' is defined but never used.","'Fade' is defined but never used.","'Slide' is defined but never used.","'setBookMarks' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Favorite' is defined but never used.","'Send' is defined but never used.","'InsertEmoticon' is defined but never used.","'Visibility' is defined but never used.","'VisibilityOff' is defined but never used.","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'Card' is defined but never used.","'Popover' is defined but never used.","'getCookie' is defined but never used.","'emoji' is assigned a value but never used.","'setEmoji' is assigned a value but never used.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","'setActors' is assigned a value but never used.","'selectedButton' is assigned a value but never used.","'setSelectedButton' is assigned a value but never used.","'setComments' is assigned a value but never used.","'viewed' is assigned a value but never used.","'setViewed' is assigned a value but never used.","'getActors' is defined but never used.","'PastEmoji' is defined but never used.","'SendComment' is defined but never used.","React Hook useEffect has a missing dependency: 'GetData'. Either include it or remove the dependency array.",["397"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'useState' is defined but never used.","'Router' is defined but never used.","'Redirect' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Link' is defined but never used.","'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'pageSize'. Either include it or remove the dependency array.",["398"],"'FavoriteIcon' is defined but never used.","'onShowSizeChange' is defined but never used.",["399"],"'DialogActions' is defined but never used.","'Modal' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setCookie' is defined but never used.","Expected '!==' and instead saw '!='.","'CloseIcon' is defined but never used.","'Adb' is defined but never used.","'Avatar' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'TextField' is defined but never used.","'Tooltip' is defined but never used.","'Typography' is defined but never used.",["393"],["394"],"'MenuIcon' is defined but never used.","'Accordion' is defined but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["400"],"'setVideoValuePage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["401"],"React Hook useEffect has a missing dependency: 'onUpdateToken'. Either include it or remove the dependency array.",["402"],"react/jsx-pascal-case","Imported JSX component Left_Bar must be in PascalCase or SCREAMING_SNAKE_CASE",["403"],"no-global-assign","no-unsafe-negation",{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"410","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"410","fix":"419"},"Update the dependencies array to be: [props, props.type]",{"range":"420","text":"421"},"Update the dependencies array to be: [pageSize, props.pageSize]",{"range":"422","text":"423"},"Update the dependencies array to be: [GetData, params.id]",{"range":"424","text":"425"},"Update the dependencies array to be: [pageSize]",{"range":"426","text":"427"},{"range":"428","text":"427"},"Update the dependencies array to be: [data]",{"range":"429","text":"430"},"Update the dependencies array to be: [history, search]",{"range":"431","text":"432"},"Update the dependencies array to be: [onUpdateToken]",{"range":"433","text":"434"},{"range":"435","text":"427"},[482,494],"[props, props.type]",[567,577],"[pageSize, props.pageSize]",[6619,6630],"[GetData, params.id]",[1281,1283],"[pageSize]",[1066,1068],[595,597],"[data]",[4433,4441],"[history, search]",[4518,4520],"[onUpdateToken]",[1136,1138]]